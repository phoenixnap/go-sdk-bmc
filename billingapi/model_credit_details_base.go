/*
Billing API

Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billingapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CreditDetailsBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditDetailsBase{}

// CreditDetailsBase Base credit details value object.
type CreditDetailsBase struct {
	// Amount applied.
	AppliedAmount        float32        `json:"appliedAmount"`
	Type                 CreditTypeEnum `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _CreditDetailsBase CreditDetailsBase

// NewCreditDetailsBase instantiates a new CreditDetailsBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditDetailsBase(appliedAmount float32, type_ CreditTypeEnum) *CreditDetailsBase {
	this := CreditDetailsBase{}
	this.AppliedAmount = appliedAmount
	this.Type = type_
	return &this
}

// NewCreditDetailsBaseWithDefaults instantiates a new CreditDetailsBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditDetailsBaseWithDefaults() *CreditDetailsBase {
	this := CreditDetailsBase{}
	return &this
}

// GetAppliedAmount returns the AppliedAmount field value
func (o *CreditDetailsBase) GetAppliedAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AppliedAmount
}

// GetAppliedAmountOk returns a tuple with the AppliedAmount field value
// and a boolean to check if the value has been set.
func (o *CreditDetailsBase) GetAppliedAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppliedAmount, true
}

// SetAppliedAmount sets field value
func (o *CreditDetailsBase) SetAppliedAmount(v float32) {
	o.AppliedAmount = v
}

// GetType returns the Type field value
func (o *CreditDetailsBase) GetType() CreditTypeEnum {
	if o == nil {
		var ret CreditTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreditDetailsBase) GetTypeOk() (*CreditTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreditDetailsBase) SetType(v CreditTypeEnum) {
	o.Type = v
}

func (o CreditDetailsBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditDetailsBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appliedAmount"] = o.AppliedAmount
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreditDetailsBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appliedAmount",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditDetailsBase := _CreditDetailsBase{}

	err = json.Unmarshal(data, &varCreditDetailsBase)

	if err != nil {
		return err
	}

	*o = CreditDetailsBase(varCreditDetailsBase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "appliedAmount")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreditDetailsBase struct {
	value *CreditDetailsBase
	isSet bool
}

func (v NullableCreditDetailsBase) Get() *CreditDetailsBase {
	return v.value
}

func (v *NullableCreditDetailsBase) Set(val *CreditDetailsBase) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditDetailsBase) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditDetailsBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditDetailsBase(val *CreditDetailsBase) *NullableCreditDetailsBase {
	return &NullableCreditDetailsBase{value: val, isSet: true}
}

func (v NullableCreditDetailsBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditDetailsBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
