/*
Billing API

Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billingapi

import (
	"encoding/json"
	"fmt"
)

// CreditTypeEnum The credit type model.
type CreditTypeEnum string

// List of CreditTypeEnum
const (
	CREDITTYPEENUM_PROMO  CreditTypeEnum = "PROMO"
	CREDITTYPEENUM_SYSTEM CreditTypeEnum = "SYSTEM"
)

// All allowed values of CreditTypeEnum enum
var AllowedCreditTypeEnumEnumValues = []CreditTypeEnum{
	"PROMO",
	"SYSTEM",
}

func (v *CreditTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CreditTypeEnum(value)
	for _, existing := range AllowedCreditTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CreditTypeEnum", value)
}

// NewCreditTypeEnumFromValue returns a pointer to a valid CreditTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreditTypeEnumFromValue(v string) (*CreditTypeEnum, error) {
	ev := CreditTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CreditTypeEnum: valid values are %v", v, AllowedCreditTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreditTypeEnum) IsValid() bool {
	for _, existing := range AllowedCreditTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CreditTypeEnum value
func (v CreditTypeEnum) Ptr() *CreditTypeEnum {
	return &v
}

type NullableCreditTypeEnum struct {
	value *CreditTypeEnum
	isSet bool
}

func (v NullableCreditTypeEnum) Get() *CreditTypeEnum {
	return v.value
}

func (v *NullableCreditTypeEnum) Set(val *CreditTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditTypeEnum(val *CreditTypeEnum) *NullableCreditTypeEnum {
	return &NullableCreditTypeEnum{value: val, isSet: true}
}

func (v NullableCreditTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
