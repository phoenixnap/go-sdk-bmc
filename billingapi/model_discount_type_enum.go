/*
Billing API

Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billingapi

import (
	"encoding/json"
	"fmt"
)

// DiscountTypeEnum The discount type.
type DiscountTypeEnum string

// List of DiscountTypeEnum
const (
	DISCOUNTTYPEENUM_PRODUCT_CODE_PERCENTAGE     DiscountTypeEnum = "PRODUCT_CODE_PERCENTAGE"
	DISCOUNTTYPEENUM_PRODUCT_CATEGORY_PERCENTAGE DiscountTypeEnum = "PRODUCT_CATEGORY_PERCENTAGE"
	DISCOUNTTYPEENUM_GLOBAL_PERCENTAGE           DiscountTypeEnum = "GLOBAL_PERCENTAGE"
)

// All allowed values of DiscountTypeEnum enum
var AllowedDiscountTypeEnumEnumValues = []DiscountTypeEnum{
	"PRODUCT_CODE_PERCENTAGE",
	"PRODUCT_CATEGORY_PERCENTAGE",
	"GLOBAL_PERCENTAGE",
}

func (v *DiscountTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiscountTypeEnum(value)
	for _, existing := range AllowedDiscountTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiscountTypeEnum", value)
}

// NewDiscountTypeEnumFromValue returns a pointer to a valid DiscountTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiscountTypeEnumFromValue(v string) (*DiscountTypeEnum, error) {
	ev := DiscountTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiscountTypeEnum: valid values are %v", v, AllowedDiscountTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiscountTypeEnum) IsValid() bool {
	for _, existing := range AllowedDiscountTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiscountTypeEnum value
func (v DiscountTypeEnum) Ptr() *DiscountTypeEnum {
	return &v
}

type NullableDiscountTypeEnum struct {
	value *DiscountTypeEnum
	isSet bool
}

func (v NullableDiscountTypeEnum) Get() *DiscountTypeEnum {
	return v.value
}

func (v *NullableDiscountTypeEnum) Set(val *DiscountTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscountTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscountTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscountTypeEnum(val *DiscountTypeEnum) *NullableDiscountTypeEnum {
	return &NullableDiscountTypeEnum{value: val, isSet: true}
}

func (v NullableDiscountTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscountTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
