/*
Billing API

Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billingapi

import (
	"encoding/json"
	"fmt"
)

// PackageUnitEnum Package size unit.
type PackageUnitEnum string

// List of PackageUnitEnum
const (
	GB PackageUnitEnum = "GB"
	TB PackageUnitEnum = "TB"
)

// All allowed values of PackageUnitEnum enum
var AllowedPackageUnitEnumEnumValues = []PackageUnitEnum{
	"GB",
	"TB",
}

func (v *PackageUnitEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PackageUnitEnum(value)
	for _, existing := range AllowedPackageUnitEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PackageUnitEnum", value)
}

// NewPackageUnitEnumFromValue returns a pointer to a valid PackageUnitEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPackageUnitEnumFromValue(v string) (*PackageUnitEnum, error) {
	ev := PackageUnitEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PackageUnitEnum: valid values are %v", v, AllowedPackageUnitEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PackageUnitEnum) IsValid() bool {
	for _, existing := range AllowedPackageUnitEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PackageUnitEnum value
func (v PackageUnitEnum) Ptr() *PackageUnitEnum {
	return &v
}

type NullablePackageUnitEnum struct {
	value *PackageUnitEnum
	isSet bool
}

func (v NullablePackageUnitEnum) Get() *PackageUnitEnum {
	return v.value
}

func (v *NullablePackageUnitEnum) Set(val *PackageUnitEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageUnitEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageUnitEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageUnitEnum(val *PackageUnitEnum) *NullablePackageUnitEnum {
	return &NullablePackageUnitEnum{value: val, isSet: true}
}

func (v NullablePackageUnitEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageUnitEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
