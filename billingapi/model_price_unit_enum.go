/*
Billing API

Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billingapi

import (
	"encoding/json"
	"fmt"
)

// PriceUnitEnum The unit to which the price applies.
type PriceUnitEnum string

// List of PriceUnitEnum
const (
	HOUR  PriceUnitEnum = "HOUR"
	MONTH PriceUnitEnum = "MONTH"
	GB    PriceUnitEnum = "GB"
	UNIT  PriceUnitEnum = "UNIT"
	FLAT  PriceUnitEnum = "FLAT"
)

// All allowed values of PriceUnitEnum enum
var AllowedPriceUnitEnumEnumValues = []PriceUnitEnum{
	"HOUR",
	"MONTH",
	"GB",
	"UNIT",
	"FLAT",
}

func (v *PriceUnitEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceUnitEnum(value)
	for _, existing := range AllowedPriceUnitEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceUnitEnum", value)
}

// NewPriceUnitEnumFromValue returns a pointer to a valid PriceUnitEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceUnitEnumFromValue(v string) (*PriceUnitEnum, error) {
	ev := PriceUnitEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceUnitEnum: valid values are %v", v, AllowedPriceUnitEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceUnitEnum) IsValid() bool {
	for _, existing := range AllowedPriceUnitEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriceUnitEnum value
func (v PriceUnitEnum) Ptr() *PriceUnitEnum {
	return &v
}

type NullablePriceUnitEnum struct {
	value *PriceUnitEnum
	isSet bool
}

func (v NullablePriceUnitEnum) Get() *PriceUnitEnum {
	return v.value
}

func (v *NullablePriceUnitEnum) Set(val *PriceUnitEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceUnitEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceUnitEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceUnitEnum(val *PriceUnitEnum) *NullablePriceUnitEnum {
	return &NullablePriceUnitEnum{value: val, isSet: true}
}

func (v NullablePriceUnitEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceUnitEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
