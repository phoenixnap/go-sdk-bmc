/*
Billing API

Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billingapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ProductAvailability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductAvailability{}

// ProductAvailability Product availability details.
type ProductAvailability struct {
	// Product code.
	ProductCode string `json:"productCode"`
	// Product category.
	ProductCategory             string                       `json:"productCategory"`
	LocationAvailabilityDetails []LocationAvailabilityDetail `json:"locationAvailabilityDetails"`
	AdditionalProperties        map[string]interface{}
}

type _ProductAvailability ProductAvailability

// NewProductAvailability instantiates a new ProductAvailability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductAvailability(productCode string, productCategory string, locationAvailabilityDetails []LocationAvailabilityDetail) *ProductAvailability {
	this := ProductAvailability{}
	this.ProductCode = productCode
	this.ProductCategory = productCategory
	this.LocationAvailabilityDetails = locationAvailabilityDetails
	return &this
}

// NewProductAvailabilityWithDefaults instantiates a new ProductAvailability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductAvailabilityWithDefaults() *ProductAvailability {
	this := ProductAvailability{}
	return &this
}

// GetProductCode returns the ProductCode field value
func (o *ProductAvailability) GetProductCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductCode
}

// GetProductCodeOk returns a tuple with the ProductCode field value
// and a boolean to check if the value has been set.
func (o *ProductAvailability) GetProductCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductCode, true
}

// SetProductCode sets field value
func (o *ProductAvailability) SetProductCode(v string) {
	o.ProductCode = v
}

// GetProductCategory returns the ProductCategory field value
func (o *ProductAvailability) GetProductCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductCategory
}

// GetProductCategoryOk returns a tuple with the ProductCategory field value
// and a boolean to check if the value has been set.
func (o *ProductAvailability) GetProductCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductCategory, true
}

// SetProductCategory sets field value
func (o *ProductAvailability) SetProductCategory(v string) {
	o.ProductCategory = v
}

// GetLocationAvailabilityDetails returns the LocationAvailabilityDetails field value
func (o *ProductAvailability) GetLocationAvailabilityDetails() []LocationAvailabilityDetail {
	if o == nil {
		var ret []LocationAvailabilityDetail
		return ret
	}

	return o.LocationAvailabilityDetails
}

// GetLocationAvailabilityDetailsOk returns a tuple with the LocationAvailabilityDetails field value
// and a boolean to check if the value has been set.
func (o *ProductAvailability) GetLocationAvailabilityDetailsOk() ([]LocationAvailabilityDetail, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationAvailabilityDetails, true
}

// SetLocationAvailabilityDetails sets field value
func (o *ProductAvailability) SetLocationAvailabilityDetails(v []LocationAvailabilityDetail) {
	o.LocationAvailabilityDetails = v
}

func (o ProductAvailability) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductAvailability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["productCode"] = o.ProductCode
	toSerialize["productCategory"] = o.ProductCategory
	toSerialize["locationAvailabilityDetails"] = o.LocationAvailabilityDetails

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProductAvailability) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"productCode",
		"productCategory",
		"locationAvailabilityDetails",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductAvailability := _ProductAvailability{}

	err = json.Unmarshal(data, &varProductAvailability)

	if err != nil {
		return err
	}

	*o = ProductAvailability(varProductAvailability)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "productCode")
		delete(additionalProperties, "productCategory")
		delete(additionalProperties, "locationAvailabilityDetails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProductAvailability struct {
	value *ProductAvailability
	isSet bool
}

func (v NullableProductAvailability) Get() *ProductAvailability {
	return v.value
}

func (v *NullableProductAvailability) Set(val *ProductAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableProductAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableProductAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductAvailability(val *ProductAvailability) *NullableProductAvailability {
	return &NullableProductAvailability{value: val, isSet: true}
}

func (v NullableProductAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
