/*
Billing API

Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billingapi

import (
	"encoding/json"
	"fmt"
)

// ProductsGet200ResponseInner - struct for ProductsGet200ResponseInner
type ProductsGet200ResponseInner struct {
	Product       *Product
	ServerProduct *ServerProduct
}

// ProductAsProductsGet200ResponseInner is a convenience function that returns Product wrapped in ProductsGet200ResponseInner
func ProductAsProductsGet200ResponseInner(v *Product) ProductsGet200ResponseInner {
	return ProductsGet200ResponseInner{
		Product: v,
	}
}

// ServerProductAsProductsGet200ResponseInner is a convenience function that returns ServerProduct wrapped in ProductsGet200ResponseInner
func ServerProductAsProductsGet200ResponseInner(v *ServerProduct) ProductsGet200ResponseInner {
	return ProductsGet200ResponseInner{
		ServerProduct: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProductsGet200ResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'BANDWIDTH'
	if jsonDict["productCategory"] == "BANDWIDTH" {
		// try to unmarshal JSON data into Product
		err = json.Unmarshal(data, &dst.Product)
		if err == nil {
			return nil // data stored in dst.Product, return on the first match
		} else {
			dst.Product = nil
			return fmt.Errorf("Failed to unmarshal ProductsGet200ResponseInner as Product: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPERATING_SYSTEM'
	if jsonDict["productCategory"] == "OPERATING_SYSTEM" {
		// try to unmarshal JSON data into Product
		err = json.Unmarshal(data, &dst.Product)
		if err == nil {
			return nil // data stored in dst.Product, return on the first match
		} else {
			dst.Product = nil
			return fmt.Errorf("Failed to unmarshal ProductsGet200ResponseInner as Product: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Product'
	if jsonDict["productCategory"] == "Product" {
		// try to unmarshal JSON data into Product
		err = json.Unmarshal(data, &dst.Product)
		if err == nil {
			return nil // data stored in dst.Product, return on the first match
		} else {
			dst.Product = nil
			return fmt.Errorf("Failed to unmarshal ProductsGet200ResponseInner as Product: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVER'
	if jsonDict["productCategory"] == "SERVER" {
		// try to unmarshal JSON data into ServerProduct
		err = json.Unmarshal(data, &dst.ServerProduct)
		if err == nil {
			return nil // data stored in dst.ServerProduct, return on the first match
		} else {
			dst.ServerProduct = nil
			return fmt.Errorf("Failed to unmarshal ProductsGet200ResponseInner as ServerProduct: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ServerProduct'
	if jsonDict["productCategory"] == "ServerProduct" {
		// try to unmarshal JSON data into ServerProduct
		err = json.Unmarshal(data, &dst.ServerProduct)
		if err == nil {
			return nil // data stored in dst.ServerProduct, return on the first match
		} else {
			dst.ServerProduct = nil
			return fmt.Errorf("Failed to unmarshal ProductsGet200ResponseInner as ServerProduct: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProductsGet200ResponseInner) MarshalJSON() ([]byte, error) {
	if src.Product != nil {
		return json.Marshal(&src.Product)
	}

	if src.ServerProduct != nil {
		return json.Marshal(&src.ServerProduct)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProductsGet200ResponseInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Product != nil {
		return obj.Product
	}

	if obj.ServerProduct != nil {
		return obj.ServerProduct
	}

	// all schemas are nil
	return nil
}

type NullableProductsGet200ResponseInner struct {
	value *ProductsGet200ResponseInner
	isSet bool
}

func (v NullableProductsGet200ResponseInner) Get() *ProductsGet200ResponseInner {
	return v.value
}

func (v *NullableProductsGet200ResponseInner) Set(val *ProductsGet200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProductsGet200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProductsGet200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductsGet200ResponseInner(val *ProductsGet200ResponseInner) *NullableProductsGet200ResponseInner {
	return &NullableProductsGet200ResponseInner{value: val, isSet: true}
}

func (v NullableProductsGet200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductsGet200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
