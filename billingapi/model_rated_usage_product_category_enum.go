/*
Billing API

Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billingapi

import (
	"encoding/json"
	"fmt"
)

// RatedUsageProductCategoryEnum The category of the product associated with this usage record.
type RatedUsageProductCategoryEnum string

// List of RatedUsageProductCategoryEnum
const (
	RATEDUSAGEPRODUCTCATEGORYENUM_BMC_SERVER       RatedUsageProductCategoryEnum = "bmc-server"
	RATEDUSAGEPRODUCTCATEGORYENUM_BANDWIDTH        RatedUsageProductCategoryEnum = "bandwidth"
	RATEDUSAGEPRODUCTCATEGORYENUM_OPERATING_SYSTEM RatedUsageProductCategoryEnum = "operating-system"
	RATEDUSAGEPRODUCTCATEGORYENUM_PUBLIC_IP        RatedUsageProductCategoryEnum = "public-ip"
	RATEDUSAGEPRODUCTCATEGORYENUM_STORAGE          RatedUsageProductCategoryEnum = "storage"
)

// All allowed values of RatedUsageProductCategoryEnum enum
var AllowedRatedUsageProductCategoryEnumEnumValues = []RatedUsageProductCategoryEnum{
	"bmc-server",
	"bandwidth",
	"operating-system",
	"public-ip",
	"storage",
}

func (v *RatedUsageProductCategoryEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RatedUsageProductCategoryEnum(value)
	for _, existing := range AllowedRatedUsageProductCategoryEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RatedUsageProductCategoryEnum", value)
}

// NewRatedUsageProductCategoryEnumFromValue returns a pointer to a valid RatedUsageProductCategoryEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRatedUsageProductCategoryEnumFromValue(v string) (*RatedUsageProductCategoryEnum, error) {
	ev := RatedUsageProductCategoryEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RatedUsageProductCategoryEnum: valid values are %v", v, AllowedRatedUsageProductCategoryEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RatedUsageProductCategoryEnum) IsValid() bool {
	for _, existing := range AllowedRatedUsageProductCategoryEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RatedUsageProductCategoryEnum value
func (v RatedUsageProductCategoryEnum) Ptr() *RatedUsageProductCategoryEnum {
	return &v
}

type NullableRatedUsageProductCategoryEnum struct {
	value *RatedUsageProductCategoryEnum
	isSet bool
}

func (v NullableRatedUsageProductCategoryEnum) Get() *RatedUsageProductCategoryEnum {
	return v.value
}

func (v *NullableRatedUsageProductCategoryEnum) Set(val *RatedUsageProductCategoryEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRatedUsageProductCategoryEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRatedUsageProductCategoryEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatedUsageProductCategoryEnum(val *RatedUsageProductCategoryEnum) *NullableRatedUsageProductCategoryEnum {
	return &NullableRatedUsageProductCategoryEnum{value: val, isSet: true}
}

func (v NullableRatedUsageProductCategoryEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatedUsageProductCategoryEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
