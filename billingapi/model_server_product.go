/*
Billing API

Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billingapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerProduct{}

// ServerProduct struct for ServerProduct
type ServerProduct struct {
	// The code identifying the product. This code has significant across all locations.
	ProductCode string `json:"productCode"`
	// The product category.
	ProductCategory string `json:"productCategory"`
	// The pricing plans available for this product.
	Plans    []PricingPlan         `json:"plans,omitempty"`
	Metadata ServerProductMetadata `json:"metadata"`
}

type _ServerProduct ServerProduct

// NewServerProduct instantiates a new ServerProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerProduct(productCode string, productCategory string, metadata ServerProductMetadata) *ServerProduct {
	this := ServerProduct{}
	this.ProductCode = productCode
	this.ProductCategory = productCategory
	this.Metadata = metadata
	return &this
}

// NewServerProductWithDefaults instantiates a new ServerProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerProductWithDefaults() *ServerProduct {
	this := ServerProduct{}
	return &this
}

// GetProductCode returns the ProductCode field value
func (o *ServerProduct) GetProductCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductCode
}

// GetProductCodeOk returns a tuple with the ProductCode field value
// and a boolean to check if the value has been set.
func (o *ServerProduct) GetProductCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductCode, true
}

// SetProductCode sets field value
func (o *ServerProduct) SetProductCode(v string) {
	o.ProductCode = v
}

// GetProductCategory returns the ProductCategory field value
func (o *ServerProduct) GetProductCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductCategory
}

// GetProductCategoryOk returns a tuple with the ProductCategory field value
// and a boolean to check if the value has been set.
func (o *ServerProduct) GetProductCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductCategory, true
}

// SetProductCategory sets field value
func (o *ServerProduct) SetProductCategory(v string) {
	o.ProductCategory = v
}

// GetPlans returns the Plans field value if set, zero value otherwise.
func (o *ServerProduct) GetPlans() []PricingPlan {
	if o == nil || IsNil(o.Plans) {
		var ret []PricingPlan
		return ret
	}
	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerProduct) GetPlansOk() ([]PricingPlan, bool) {
	if o == nil || IsNil(o.Plans) {
		return nil, false
	}
	return o.Plans, true
}

// HasPlans returns a boolean if a field has been set.
func (o *ServerProduct) HasPlans() bool {
	if o != nil && !IsNil(o.Plans) {
		return true
	}

	return false
}

// SetPlans gets a reference to the given []PricingPlan and assigns it to the Plans field.
func (o *ServerProduct) SetPlans(v []PricingPlan) {
	o.Plans = v
}

// GetMetadata returns the Metadata field value
func (o *ServerProduct) GetMetadata() ServerProductMetadata {
	if o == nil {
		var ret ServerProductMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ServerProduct) GetMetadataOk() (*ServerProductMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ServerProduct) SetMetadata(v ServerProductMetadata) {
	o.Metadata = v
}

func (o ServerProduct) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["productCode"] = o.ProductCode
	toSerialize["productCategory"] = o.ProductCategory
	if !IsNil(o.Plans) {
		toSerialize["plans"] = o.Plans
	}
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

func (o *ServerProduct) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"productCode",
		"productCategory",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerProduct := _ServerProduct{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerProduct)

	if err != nil {
		return err
	}

	*o = ServerProduct(varServerProduct)

	return err
}

type NullableServerProduct struct {
	value *ServerProduct
	isSet bool
}

func (v NullableServerProduct) Get() *ServerProduct {
	return v.value
}

func (v *NullableServerProduct) Set(val *ServerProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableServerProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableServerProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerProduct(val *ServerProduct) *NullableServerProduct {
	return &NullableServerProduct{value: val, isSet: true}
}

func (v NullableServerProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
