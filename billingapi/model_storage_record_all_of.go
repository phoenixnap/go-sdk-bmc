/*
Billing API

Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billingapi

import (
	"encoding/json"
)

// StorageRecordAllOf Storage usage record.
type StorageRecordAllOf struct {
	Metadata StorageDetails `json:"metadata"`
}

// NewStorageRecordAllOf instantiates a new StorageRecordAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageRecordAllOf(metadata StorageDetails) *StorageRecordAllOf {
	this := StorageRecordAllOf{}
	this.Metadata = metadata
	return &this
}

// NewStorageRecordAllOfWithDefaults instantiates a new StorageRecordAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageRecordAllOfWithDefaults() *StorageRecordAllOf {
	this := StorageRecordAllOf{}
	return &this
}

// GetMetadata returns the Metadata field value
func (o *StorageRecordAllOf) GetMetadata() StorageDetails {
	if o == nil {
		var ret StorageDetails
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *StorageRecordAllOf) GetMetadataOk() (*StorageDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *StorageRecordAllOf) SetMetadata(v StorageDetails) {
	o.Metadata = v
}

func (o StorageRecordAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableStorageRecordAllOf struct {
	value *StorageRecordAllOf
	isSet bool
}

func (v NullableStorageRecordAllOf) Get() *StorageRecordAllOf {
	return v.value
}

func (v *NullableStorageRecordAllOf) Set(val *StorageRecordAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageRecordAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageRecordAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageRecordAllOf(val *StorageRecordAllOf) *NullableStorageRecordAllOf {
	return &NullableStorageRecordAllOf{value: val, isSet: true}
}

func (v NullableStorageRecordAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageRecordAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
