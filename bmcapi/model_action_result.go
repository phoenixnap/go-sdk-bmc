/*
Bare Metal Cloud API

Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ActionResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionResult{}

// ActionResult Result of a successful action.
type ActionResult struct {
	// Message describing the action's result.
	Result               string `json:"result"`
	AdditionalProperties map[string]interface{}
}

type _ActionResult ActionResult

// NewActionResult instantiates a new ActionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionResult(result string) *ActionResult {
	this := ActionResult{}
	this.Result = result
	return &this
}

// NewActionResultWithDefaults instantiates a new ActionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionResultWithDefaults() *ActionResult {
	this := ActionResult{}
	return &this
}

// GetResult returns the Result field value
func (o *ActionResult) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *ActionResult) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *ActionResult) SetResult(v string) {
	o.Result = v
}

func (o ActionResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ActionResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActionResult := _ActionResult{}

	err = json.Unmarshal(data, &varActionResult)

	if err != nil {
		return err
	}

	*o = ActionResult(varActionResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableActionResult struct {
	value *ActionResult
	isSet bool
}

func (v NullableActionResult) Get() *ActionResult {
	return v.value
}

func (v *NullableActionResult) Set(val *ActionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableActionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableActionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionResult(val *ActionResult) *NullableActionResult {
	return &NullableActionResult{value: val, isSet: true}
}

func (v NullableActionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
