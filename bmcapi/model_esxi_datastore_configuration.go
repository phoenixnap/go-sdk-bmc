/*
Bare Metal Cloud API

Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the EsxiDatastoreConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EsxiDatastoreConfiguration{}

// EsxiDatastoreConfiguration Esxi data storage configuration.
type EsxiDatastoreConfiguration struct {
	// Datastore name
	DatastoreName        string `json:"datastoreName"`
	AdditionalProperties map[string]interface{}
}

type _EsxiDatastoreConfiguration EsxiDatastoreConfiguration

// NewEsxiDatastoreConfiguration instantiates a new EsxiDatastoreConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsxiDatastoreConfiguration(datastoreName string) *EsxiDatastoreConfiguration {
	this := EsxiDatastoreConfiguration{}
	this.DatastoreName = datastoreName
	return &this
}

// NewEsxiDatastoreConfigurationWithDefaults instantiates a new EsxiDatastoreConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsxiDatastoreConfigurationWithDefaults() *EsxiDatastoreConfiguration {
	this := EsxiDatastoreConfiguration{}
	return &this
}

// GetDatastoreName returns the DatastoreName field value
func (o *EsxiDatastoreConfiguration) GetDatastoreName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatastoreName
}

// GetDatastoreNameOk returns a tuple with the DatastoreName field value
// and a boolean to check if the value has been set.
func (o *EsxiDatastoreConfiguration) GetDatastoreNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatastoreName, true
}

// SetDatastoreName sets field value
func (o *EsxiDatastoreConfiguration) SetDatastoreName(v string) {
	o.DatastoreName = v
}

func (o EsxiDatastoreConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EsxiDatastoreConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datastoreName"] = o.DatastoreName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EsxiDatastoreConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"datastoreName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEsxiDatastoreConfiguration := _EsxiDatastoreConfiguration{}

	err = json.Unmarshal(data, &varEsxiDatastoreConfiguration)

	if err != nil {
		return err
	}

	*o = EsxiDatastoreConfiguration(varEsxiDatastoreConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "datastoreName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEsxiDatastoreConfiguration struct {
	value *EsxiDatastoreConfiguration
	isSet bool
}

func (v NullableEsxiDatastoreConfiguration) Get() *EsxiDatastoreConfiguration {
	return v.value
}

func (v *NullableEsxiDatastoreConfiguration) Set(val *EsxiDatastoreConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableEsxiDatastoreConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableEsxiDatastoreConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsxiDatastoreConfiguration(val *EsxiDatastoreConfiguration) *NullableEsxiDatastoreConfiguration {
	return &NullableEsxiDatastoreConfiguration{value: val, isSet: true}
}

func (v NullableEsxiDatastoreConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsxiDatastoreConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
