/*
Bare Metal Cloud API

Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmcapi

import (
	"encoding/json"
)

// checks if the OsConfigurationMapEsxi type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OsConfigurationMapEsxi{}

// OsConfigurationMapEsxi VMWare ESXi configuration properties.
type OsConfigurationMapEsxi struct {
	// (Read-only) Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
	RootPassword *string `json:"rootPassword,omitempty"`
	// (Read-only) The URL of the management UI which will only be returned in response to provisioning a server.
	ManagementUiUrl *string `json:"managementUiUrl,omitempty"`
	// List of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled. This will only be returned in response to provisioning a server.
	ManagementAccessAllowedIps []string `json:"managementAccessAllowedIps,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _OsConfigurationMapEsxi OsConfigurationMapEsxi

// NewOsConfigurationMapEsxi instantiates a new OsConfigurationMapEsxi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsConfigurationMapEsxi() *OsConfigurationMapEsxi {
	this := OsConfigurationMapEsxi{}
	return &this
}

// NewOsConfigurationMapEsxiWithDefaults instantiates a new OsConfigurationMapEsxi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsConfigurationMapEsxiWithDefaults() *OsConfigurationMapEsxi {
	this := OsConfigurationMapEsxi{}
	return &this
}

// GetRootPassword returns the RootPassword field value if set, zero value otherwise.
func (o *OsConfigurationMapEsxi) GetRootPassword() string {
	if o == nil || IsNil(o.RootPassword) {
		var ret string
		return ret
	}
	return *o.RootPassword
}

// GetRootPasswordOk returns a tuple with the RootPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsConfigurationMapEsxi) GetRootPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.RootPassword) {
		return nil, false
	}
	return o.RootPassword, true
}

// HasRootPassword returns a boolean if a field has been set.
func (o *OsConfigurationMapEsxi) HasRootPassword() bool {
	if o != nil && !IsNil(o.RootPassword) {
		return true
	}

	return false
}

// SetRootPassword gets a reference to the given string and assigns it to the RootPassword field.
func (o *OsConfigurationMapEsxi) SetRootPassword(v string) {
	o.RootPassword = &v
}

// GetManagementUiUrl returns the ManagementUiUrl field value if set, zero value otherwise.
func (o *OsConfigurationMapEsxi) GetManagementUiUrl() string {
	if o == nil || IsNil(o.ManagementUiUrl) {
		var ret string
		return ret
	}
	return *o.ManagementUiUrl
}

// GetManagementUiUrlOk returns a tuple with the ManagementUiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsConfigurationMapEsxi) GetManagementUiUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementUiUrl) {
		return nil, false
	}
	return o.ManagementUiUrl, true
}

// HasManagementUiUrl returns a boolean if a field has been set.
func (o *OsConfigurationMapEsxi) HasManagementUiUrl() bool {
	if o != nil && !IsNil(o.ManagementUiUrl) {
		return true
	}

	return false
}

// SetManagementUiUrl gets a reference to the given string and assigns it to the ManagementUiUrl field.
func (o *OsConfigurationMapEsxi) SetManagementUiUrl(v string) {
	o.ManagementUiUrl = &v
}

// GetManagementAccessAllowedIps returns the ManagementAccessAllowedIps field value if set, zero value otherwise.
func (o *OsConfigurationMapEsxi) GetManagementAccessAllowedIps() []string {
	if o == nil || IsNil(o.ManagementAccessAllowedIps) {
		var ret []string
		return ret
	}
	return o.ManagementAccessAllowedIps
}

// GetManagementAccessAllowedIpsOk returns a tuple with the ManagementAccessAllowedIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsConfigurationMapEsxi) GetManagementAccessAllowedIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.ManagementAccessAllowedIps) {
		return nil, false
	}
	return o.ManagementAccessAllowedIps, true
}

// HasManagementAccessAllowedIps returns a boolean if a field has been set.
func (o *OsConfigurationMapEsxi) HasManagementAccessAllowedIps() bool {
	if o != nil && !IsNil(o.ManagementAccessAllowedIps) {
		return true
	}

	return false
}

// SetManagementAccessAllowedIps gets a reference to the given []string and assigns it to the ManagementAccessAllowedIps field.
func (o *OsConfigurationMapEsxi) SetManagementAccessAllowedIps(v []string) {
	o.ManagementAccessAllowedIps = v
}

func (o OsConfigurationMapEsxi) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OsConfigurationMapEsxi) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RootPassword) {
		toSerialize["rootPassword"] = o.RootPassword
	}
	if !IsNil(o.ManagementUiUrl) {
		toSerialize["managementUiUrl"] = o.ManagementUiUrl
	}
	if !IsNil(o.ManagementAccessAllowedIps) {
		toSerialize["managementAccessAllowedIps"] = o.ManagementAccessAllowedIps
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OsConfigurationMapEsxi) UnmarshalJSON(data []byte) (err error) {
	varOsConfigurationMapEsxi := _OsConfigurationMapEsxi{}

	err = json.Unmarshal(data, &varOsConfigurationMapEsxi)

	if err != nil {
		return err
	}

	*o = OsConfigurationMapEsxi(varOsConfigurationMapEsxi)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rootPassword")
		delete(additionalProperties, "managementUiUrl")
		delete(additionalProperties, "managementAccessAllowedIps")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOsConfigurationMapEsxi struct {
	value *OsConfigurationMapEsxi
	isSet bool
}

func (v NullableOsConfigurationMapEsxi) Get() *OsConfigurationMapEsxi {
	return v.value
}

func (v *NullableOsConfigurationMapEsxi) Set(val *OsConfigurationMapEsxi) {
	v.value = val
	v.isSet = true
}

func (v NullableOsConfigurationMapEsxi) IsSet() bool {
	return v.isSet
}

func (v *NullableOsConfigurationMapEsxi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsConfigurationMapEsxi(val *OsConfigurationMapEsxi) *NullableOsConfigurationMapEsxi {
	return &NullableOsConfigurationMapEsxi{value: val, isSet: true}
}

func (v NullableOsConfigurationMapEsxi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsConfigurationMapEsxi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
