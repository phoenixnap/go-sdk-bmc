/*
Bare Metal Cloud API

Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmcapi

import (
	"encoding/json"
)

// OsConfigurationNetrisController Netris Controller configuration properties. Knowledge base article to help you can be found <a href='https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller' target='_blank'>here</a>.
type OsConfigurationNetrisController struct {
	// (Read-only) Host OS on which the Netris Controller is installed.
	HostOs *string `json:"hostOs,omitempty"`
	// (Read-only) The URL for the Netris Controller web console. It will only be returned in response to provisioning a server.
	NetrisWebConsoleUrl *string `json:"netrisWebConsoleUrl,omitempty"`
	// (Read-only) Auto-generated password set for user 'netris' in the web console.<br>  The password is not stored and therefore will only be returned in response to provisioning a server. Copy and save it for future reference.
	NetrisUserPassword *string `json:"netrisUserPassword,omitempty"`
}

// NewOsConfigurationNetrisController instantiates a new OsConfigurationNetrisController object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsConfigurationNetrisController() *OsConfigurationNetrisController {
	this := OsConfigurationNetrisController{}
	return &this
}

// NewOsConfigurationNetrisControllerWithDefaults instantiates a new OsConfigurationNetrisController object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsConfigurationNetrisControllerWithDefaults() *OsConfigurationNetrisController {
	this := OsConfigurationNetrisController{}
	return &this
}

// GetHostOs returns the HostOs field value if set, zero value otherwise.
func (o *OsConfigurationNetrisController) GetHostOs() string {
	if o == nil || o.HostOs == nil {
		var ret string
		return ret
	}
	return *o.HostOs
}

// GetHostOsOk returns a tuple with the HostOs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsConfigurationNetrisController) GetHostOsOk() (*string, bool) {
	if o == nil || o.HostOs == nil {
		return nil, false
	}
	return o.HostOs, true
}

// HasHostOs returns a boolean if a field has been set.
func (o *OsConfigurationNetrisController) HasHostOs() bool {
	if o != nil && o.HostOs != nil {
		return true
	}

	return false
}

// SetHostOs gets a reference to the given string and assigns it to the HostOs field.
func (o *OsConfigurationNetrisController) SetHostOs(v string) {
	o.HostOs = &v
}

// GetNetrisWebConsoleUrl returns the NetrisWebConsoleUrl field value if set, zero value otherwise.
func (o *OsConfigurationNetrisController) GetNetrisWebConsoleUrl() string {
	if o == nil || o.NetrisWebConsoleUrl == nil {
		var ret string
		return ret
	}
	return *o.NetrisWebConsoleUrl
}

// GetNetrisWebConsoleUrlOk returns a tuple with the NetrisWebConsoleUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsConfigurationNetrisController) GetNetrisWebConsoleUrlOk() (*string, bool) {
	if o == nil || o.NetrisWebConsoleUrl == nil {
		return nil, false
	}
	return o.NetrisWebConsoleUrl, true
}

// HasNetrisWebConsoleUrl returns a boolean if a field has been set.
func (o *OsConfigurationNetrisController) HasNetrisWebConsoleUrl() bool {
	if o != nil && o.NetrisWebConsoleUrl != nil {
		return true
	}

	return false
}

// SetNetrisWebConsoleUrl gets a reference to the given string and assigns it to the NetrisWebConsoleUrl field.
func (o *OsConfigurationNetrisController) SetNetrisWebConsoleUrl(v string) {
	o.NetrisWebConsoleUrl = &v
}

// GetNetrisUserPassword returns the NetrisUserPassword field value if set, zero value otherwise.
func (o *OsConfigurationNetrisController) GetNetrisUserPassword() string {
	if o == nil || o.NetrisUserPassword == nil {
		var ret string
		return ret
	}
	return *o.NetrisUserPassword
}

// GetNetrisUserPasswordOk returns a tuple with the NetrisUserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsConfigurationNetrisController) GetNetrisUserPasswordOk() (*string, bool) {
	if o == nil || o.NetrisUserPassword == nil {
		return nil, false
	}
	return o.NetrisUserPassword, true
}

// HasNetrisUserPassword returns a boolean if a field has been set.
func (o *OsConfigurationNetrisController) HasNetrisUserPassword() bool {
	if o != nil && o.NetrisUserPassword != nil {
		return true
	}

	return false
}

// SetNetrisUserPassword gets a reference to the given string and assigns it to the NetrisUserPassword field.
func (o *OsConfigurationNetrisController) SetNetrisUserPassword(v string) {
	o.NetrisUserPassword = &v
}

func (o OsConfigurationNetrisController) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HostOs != nil {
		toSerialize["hostOs"] = o.HostOs
	}
	if o.NetrisWebConsoleUrl != nil {
		toSerialize["netrisWebConsoleUrl"] = o.NetrisWebConsoleUrl
	}
	if o.NetrisUserPassword != nil {
		toSerialize["netrisUserPassword"] = o.NetrisUserPassword
	}
	return json.Marshal(toSerialize)
}

type NullableOsConfigurationNetrisController struct {
	value *OsConfigurationNetrisController
	isSet bool
}

func (v NullableOsConfigurationNetrisController) Get() *OsConfigurationNetrisController {
	return v.value
}

func (v *NullableOsConfigurationNetrisController) Set(val *OsConfigurationNetrisController) {
	v.value = val
	v.isSet = true
}

func (v NullableOsConfigurationNetrisController) IsSet() bool {
	return v.isSet
}

func (v *NullableOsConfigurationNetrisController) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsConfigurationNetrisController(val *OsConfigurationNetrisController) *NullableOsConfigurationNetrisController {
	return &NullableOsConfigurationNetrisController{value: val, isSet: true}
}

func (v NullableOsConfigurationNetrisController) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsConfigurationNetrisController) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
