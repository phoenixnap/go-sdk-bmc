/*
Bare Metal Cloud API

Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmcapi

import (
	"encoding/json"
)

// ResetResult Result of a successful reset action.
type ResetResult struct {
	// Message describing the reset result.
	Result string `json:"result"`
	// Password set for user Admin on Windows server or user root on ESXi server.
	Password        *string             `json:"password,omitempty"`
	OsConfiguration *OsConfigurationMap `json:"osConfiguration,omitempty"`
}

// NewResetResult instantiates a new ResetResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResetResult(result string) *ResetResult {
	this := ResetResult{}
	this.Result = result
	return &this
}

// NewResetResultWithDefaults instantiates a new ResetResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResetResultWithDefaults() *ResetResult {
	this := ResetResult{}
	return &this
}

// GetResult returns the Result field value
func (o *ResetResult) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *ResetResult) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *ResetResult) SetResult(v string) {
	o.Result = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ResetResult) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResetResult) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ResetResult) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ResetResult) SetPassword(v string) {
	o.Password = &v
}

// GetOsConfiguration returns the OsConfiguration field value if set, zero value otherwise.
func (o *ResetResult) GetOsConfiguration() OsConfigurationMap {
	if o == nil || o.OsConfiguration == nil {
		var ret OsConfigurationMap
		return ret
	}
	return *o.OsConfiguration
}

// GetOsConfigurationOk returns a tuple with the OsConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResetResult) GetOsConfigurationOk() (*OsConfigurationMap, bool) {
	if o == nil || o.OsConfiguration == nil {
		return nil, false
	}
	return o.OsConfiguration, true
}

// HasOsConfiguration returns a boolean if a field has been set.
func (o *ResetResult) HasOsConfiguration() bool {
	if o != nil && o.OsConfiguration != nil {
		return true
	}

	return false
}

// SetOsConfiguration gets a reference to the given OsConfigurationMap and assigns it to the OsConfiguration field.
func (o *ResetResult) SetOsConfiguration(v OsConfigurationMap) {
	o.OsConfiguration = &v
}

func (o ResetResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["result"] = o.Result
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.OsConfiguration != nil {
		toSerialize["osConfiguration"] = o.OsConfiguration
	}
	return json.Marshal(toSerialize)
}

type NullableResetResult struct {
	value *ResetResult
	isSet bool
}

func (v NullableResetResult) Get() *ResetResult {
	return v.value
}

func (v *NullableResetResult) Set(val *ResetResult) {
	v.value = val
	v.isSet = true
}

func (v NullableResetResult) IsSet() bool {
	return v.isSet
}

func (v *NullableResetResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResetResult(val *ResetResult) *NullableResetResult {
	return &NullableResetResult{value: val, isSet: true}
}

func (v NullableResetResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResetResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
