/*
Bare Metal Cloud API

Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmcapi

import (
	"encoding/json"
)

// ServerNetworkUpdate Update network details of bare metal server.
type ServerNetworkUpdate struct {
	// List of IPs to be associated to the server.<br> Setting the `force` query parameter to `true` allows you to:<ul> <li> Assign no specific IP addresses by designating an empty array of IPs. <li> Assign one or more IP addresses which are already configured on other resource(s) in network.</ul>
	Ips []string `json:"ips,omitempty"`
}

// NewServerNetworkUpdate instantiates a new ServerNetworkUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerNetworkUpdate() *ServerNetworkUpdate {
	this := ServerNetworkUpdate{}
	return &this
}

// NewServerNetworkUpdateWithDefaults instantiates a new ServerNetworkUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerNetworkUpdateWithDefaults() *ServerNetworkUpdate {
	this := ServerNetworkUpdate{}
	return &this
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *ServerNetworkUpdate) GetIps() []string {
	if o == nil || o.Ips == nil {
		var ret []string
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerNetworkUpdate) GetIpsOk() ([]string, bool) {
	if o == nil || o.Ips == nil {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *ServerNetworkUpdate) HasIps() bool {
	if o != nil && o.Ips != nil {
		return true
	}

	return false
}

// SetIps gets a reference to the given []string and assigns it to the Ips field.
func (o *ServerNetworkUpdate) SetIps(v []string) {
	o.Ips = v
}

func (o ServerNetworkUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ips != nil {
		toSerialize["ips"] = o.Ips
	}
	return json.Marshal(toSerialize)
}

type NullableServerNetworkUpdate struct {
	value *ServerNetworkUpdate
	isSet bool
}

func (v NullableServerNetworkUpdate) Get() *ServerNetworkUpdate {
	return v.value
}

func (v *NullableServerNetworkUpdate) Set(val *ServerNetworkUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableServerNetworkUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableServerNetworkUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerNetworkUpdate(val *ServerNetworkUpdate) *NullableServerNetworkUpdate {
	return &NullableServerNetworkUpdate{value: val, isSet: true}
}

func (v NullableServerNetworkUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerNetworkUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
