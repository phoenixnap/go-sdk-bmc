/*
Bare Metal Cloud API

Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmcapi

import (
	"encoding/json"
)

// ServerProvision Provision bare metal server.
type ServerProvision struct {
	// Hostname of server.
	Hostname string `json:"hostname"`
	// Description of server.
	Description *string `json:"description,omitempty"`
	// The serverâ€™s OS ID used when the server was created. Currently this field should be set to either `ubuntu/bionic`, `ubuntu/focal`, `ubuntu/jammy`, `centos/centos7`, `centos/centos8`, `windows/srv2019std`, `windows/srv2019dc`, `esxi/esxi70`, `esxi/esxi80`, `almalinux/almalinux8`, `rockylinux/rockylinux8`, `debian/bullseye`, `debian/bookworm`, `proxmox/bullseye`, `netris/controller`, `netris/softgate_1g`, `netris/softgate_10g` or `netris/softgate_25g`.
	Os string `json:"os"`
	// Whether or not to install SSH keys marked as default in addition to any SSH keys specified in this request.
	InstallDefaultSshKeys *bool `json:"installDefaultSshKeys,omitempty"`
	// A list of SSH keys that will be installed on the server.
	SshKeys []string `json:"sshKeys,omitempty"`
	// A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
	SshKeyIds []string `json:"sshKeyIds,omitempty"`
	// The type of network configuration for this server.<br> Currently this field should be set to `PUBLIC_AND_PRIVATE`, `PRIVATE_ONLY`, `PUBLIC_ONLY` or `USER_DEFINED`.<br> Setting the `force` query parameter to `true` allows you to configure network configuration type as `NONE`.
	NetworkType     *string          `json:"networkType,omitempty"`
	OsConfiguration *OsConfiguration `json:"osConfiguration,omitempty"`
	// Tags to set to the server. To create a new tag or list all the existing tags that you can use, refer to [Tags API](https://developers.phoenixnap.com/docs/tags/1/overview).
	Tags                 []TagAssignmentRequest `json:"tags,omitempty"`
	NetworkConfiguration *NetworkConfiguration  `json:"networkConfiguration,omitempty"`
	StorageConfiguration *StorageConfiguration  `json:"storageConfiguration,omitempty"`
}

// NewServerProvision instantiates a new ServerProvision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerProvision(hostname string, os string) *ServerProvision {
	this := ServerProvision{}
	this.Hostname = hostname
	this.Os = os
	var installDefaultSshKeys bool = true
	this.InstallDefaultSshKeys = &installDefaultSshKeys
	var networkType string = "PUBLIC_AND_PRIVATE"
	this.NetworkType = &networkType
	return &this
}

// NewServerProvisionWithDefaults instantiates a new ServerProvision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerProvisionWithDefaults() *ServerProvision {
	this := ServerProvision{}
	var installDefaultSshKeys bool = true
	this.InstallDefaultSshKeys = &installDefaultSshKeys
	var networkType string = "PUBLIC_AND_PRIVATE"
	this.NetworkType = &networkType
	return &this
}

// GetHostname returns the Hostname field value
func (o *ServerProvision) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *ServerProvision) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *ServerProvision) SetHostname(v string) {
	o.Hostname = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ServerProvision) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerProvision) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ServerProvision) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ServerProvision) SetDescription(v string) {
	o.Description = &v
}

// GetOs returns the Os field value
func (o *ServerProvision) GetOs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *ServerProvision) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *ServerProvision) SetOs(v string) {
	o.Os = v
}

// GetInstallDefaultSshKeys returns the InstallDefaultSshKeys field value if set, zero value otherwise.
func (o *ServerProvision) GetInstallDefaultSshKeys() bool {
	if o == nil || o.InstallDefaultSshKeys == nil {
		var ret bool
		return ret
	}
	return *o.InstallDefaultSshKeys
}

// GetInstallDefaultSshKeysOk returns a tuple with the InstallDefaultSshKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerProvision) GetInstallDefaultSshKeysOk() (*bool, bool) {
	if o == nil || o.InstallDefaultSshKeys == nil {
		return nil, false
	}
	return o.InstallDefaultSshKeys, true
}

// HasInstallDefaultSshKeys returns a boolean if a field has been set.
func (o *ServerProvision) HasInstallDefaultSshKeys() bool {
	if o != nil && o.InstallDefaultSshKeys != nil {
		return true
	}

	return false
}

// SetInstallDefaultSshKeys gets a reference to the given bool and assigns it to the InstallDefaultSshKeys field.
func (o *ServerProvision) SetInstallDefaultSshKeys(v bool) {
	o.InstallDefaultSshKeys = &v
}

// GetSshKeys returns the SshKeys field value if set, zero value otherwise.
func (o *ServerProvision) GetSshKeys() []string {
	if o == nil || o.SshKeys == nil {
		var ret []string
		return ret
	}
	return o.SshKeys
}

// GetSshKeysOk returns a tuple with the SshKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerProvision) GetSshKeysOk() ([]string, bool) {
	if o == nil || o.SshKeys == nil {
		return nil, false
	}
	return o.SshKeys, true
}

// HasSshKeys returns a boolean if a field has been set.
func (o *ServerProvision) HasSshKeys() bool {
	if o != nil && o.SshKeys != nil {
		return true
	}

	return false
}

// SetSshKeys gets a reference to the given []string and assigns it to the SshKeys field.
func (o *ServerProvision) SetSshKeys(v []string) {
	o.SshKeys = v
}

// GetSshKeyIds returns the SshKeyIds field value if set, zero value otherwise.
func (o *ServerProvision) GetSshKeyIds() []string {
	if o == nil || o.SshKeyIds == nil {
		var ret []string
		return ret
	}
	return o.SshKeyIds
}

// GetSshKeyIdsOk returns a tuple with the SshKeyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerProvision) GetSshKeyIdsOk() ([]string, bool) {
	if o == nil || o.SshKeyIds == nil {
		return nil, false
	}
	return o.SshKeyIds, true
}

// HasSshKeyIds returns a boolean if a field has been set.
func (o *ServerProvision) HasSshKeyIds() bool {
	if o != nil && o.SshKeyIds != nil {
		return true
	}

	return false
}

// SetSshKeyIds gets a reference to the given []string and assigns it to the SshKeyIds field.
func (o *ServerProvision) SetSshKeyIds(v []string) {
	o.SshKeyIds = v
}

// GetNetworkType returns the NetworkType field value if set, zero value otherwise.
func (o *ServerProvision) GetNetworkType() string {
	if o == nil || o.NetworkType == nil {
		var ret string
		return ret
	}
	return *o.NetworkType
}

// GetNetworkTypeOk returns a tuple with the NetworkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerProvision) GetNetworkTypeOk() (*string, bool) {
	if o == nil || o.NetworkType == nil {
		return nil, false
	}
	return o.NetworkType, true
}

// HasNetworkType returns a boolean if a field has been set.
func (o *ServerProvision) HasNetworkType() bool {
	if o != nil && o.NetworkType != nil {
		return true
	}

	return false
}

// SetNetworkType gets a reference to the given string and assigns it to the NetworkType field.
func (o *ServerProvision) SetNetworkType(v string) {
	o.NetworkType = &v
}

// GetOsConfiguration returns the OsConfiguration field value if set, zero value otherwise.
func (o *ServerProvision) GetOsConfiguration() OsConfiguration {
	if o == nil || o.OsConfiguration == nil {
		var ret OsConfiguration
		return ret
	}
	return *o.OsConfiguration
}

// GetOsConfigurationOk returns a tuple with the OsConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerProvision) GetOsConfigurationOk() (*OsConfiguration, bool) {
	if o == nil || o.OsConfiguration == nil {
		return nil, false
	}
	return o.OsConfiguration, true
}

// HasOsConfiguration returns a boolean if a field has been set.
func (o *ServerProvision) HasOsConfiguration() bool {
	if o != nil && o.OsConfiguration != nil {
		return true
	}

	return false
}

// SetOsConfiguration gets a reference to the given OsConfiguration and assigns it to the OsConfiguration field.
func (o *ServerProvision) SetOsConfiguration(v OsConfiguration) {
	o.OsConfiguration = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ServerProvision) GetTags() []TagAssignmentRequest {
	if o == nil || o.Tags == nil {
		var ret []TagAssignmentRequest
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerProvision) GetTagsOk() ([]TagAssignmentRequest, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ServerProvision) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagAssignmentRequest and assigns it to the Tags field.
func (o *ServerProvision) SetTags(v []TagAssignmentRequest) {
	o.Tags = v
}

// GetNetworkConfiguration returns the NetworkConfiguration field value if set, zero value otherwise.
func (o *ServerProvision) GetNetworkConfiguration() NetworkConfiguration {
	if o == nil || o.NetworkConfiguration == nil {
		var ret NetworkConfiguration
		return ret
	}
	return *o.NetworkConfiguration
}

// GetNetworkConfigurationOk returns a tuple with the NetworkConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerProvision) GetNetworkConfigurationOk() (*NetworkConfiguration, bool) {
	if o == nil || o.NetworkConfiguration == nil {
		return nil, false
	}
	return o.NetworkConfiguration, true
}

// HasNetworkConfiguration returns a boolean if a field has been set.
func (o *ServerProvision) HasNetworkConfiguration() bool {
	if o != nil && o.NetworkConfiguration != nil {
		return true
	}

	return false
}

// SetNetworkConfiguration gets a reference to the given NetworkConfiguration and assigns it to the NetworkConfiguration field.
func (o *ServerProvision) SetNetworkConfiguration(v NetworkConfiguration) {
	o.NetworkConfiguration = &v
}

// GetStorageConfiguration returns the StorageConfiguration field value if set, zero value otherwise.
func (o *ServerProvision) GetStorageConfiguration() StorageConfiguration {
	if o == nil || o.StorageConfiguration == nil {
		var ret StorageConfiguration
		return ret
	}
	return *o.StorageConfiguration
}

// GetStorageConfigurationOk returns a tuple with the StorageConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerProvision) GetStorageConfigurationOk() (*StorageConfiguration, bool) {
	if o == nil || o.StorageConfiguration == nil {
		return nil, false
	}
	return o.StorageConfiguration, true
}

// HasStorageConfiguration returns a boolean if a field has been set.
func (o *ServerProvision) HasStorageConfiguration() bool {
	if o != nil && o.StorageConfiguration != nil {
		return true
	}

	return false
}

// SetStorageConfiguration gets a reference to the given StorageConfiguration and assigns it to the StorageConfiguration field.
func (o *ServerProvision) SetStorageConfiguration(v StorageConfiguration) {
	o.StorageConfiguration = &v
}

func (o ServerProvision) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["os"] = o.Os
	}
	if o.InstallDefaultSshKeys != nil {
		toSerialize["installDefaultSshKeys"] = o.InstallDefaultSshKeys
	}
	if o.SshKeys != nil {
		toSerialize["sshKeys"] = o.SshKeys
	}
	if o.SshKeyIds != nil {
		toSerialize["sshKeyIds"] = o.SshKeyIds
	}
	if o.NetworkType != nil {
		toSerialize["networkType"] = o.NetworkType
	}
	if o.OsConfiguration != nil {
		toSerialize["osConfiguration"] = o.OsConfiguration
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.NetworkConfiguration != nil {
		toSerialize["networkConfiguration"] = o.NetworkConfiguration
	}
	if o.StorageConfiguration != nil {
		toSerialize["storageConfiguration"] = o.StorageConfiguration
	}
	return json.Marshal(toSerialize)
}

type NullableServerProvision struct {
	value *ServerProvision
	isSet bool
}

func (v NullableServerProvision) Get() *ServerProvision {
	return v.value
}

func (v *NullableServerProvision) Set(val *ServerProvision) {
	v.value = val
	v.isSet = true
}

func (v NullableServerProvision) IsSet() bool {
	return v.isSet
}

func (v *NullableServerProvision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerProvision(val *ServerProvision) *NullableServerProvision {
	return &NullableServerProvision{value: val, isSet: true}
}

func (v NullableServerProvision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerProvision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
