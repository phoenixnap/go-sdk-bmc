/*
Bare Metal Cloud API

Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmcapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SshKeyUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SshKeyUpdate{}

// SshKeyUpdate SSH key modification model.
type SshKeyUpdate struct {
	// Keys marked as default are always included on server creation and reset unless toggled off in creation/reset request.
	Default bool `json:"default"`
	// SSH key name that can represent the key as an alternative to its ID.
	Name string `json:"name"`
}

type _SshKeyUpdate SshKeyUpdate

// NewSshKeyUpdate instantiates a new SshKeyUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshKeyUpdate(default_ bool, name string) *SshKeyUpdate {
	this := SshKeyUpdate{}
	this.Default = default_
	this.Name = name
	return &this
}

// NewSshKeyUpdateWithDefaults instantiates a new SshKeyUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshKeyUpdateWithDefaults() *SshKeyUpdate {
	this := SshKeyUpdate{}
	return &this
}

// GetDefault returns the Default field value
func (o *SshKeyUpdate) GetDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Default
}

// GetDefaultOk returns a tuple with the Default field value
// and a boolean to check if the value has been set.
func (o *SshKeyUpdate) GetDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Default, true
}

// SetDefault sets field value
func (o *SshKeyUpdate) SetDefault(v bool) {
	o.Default = v
}

// GetName returns the Name field value
func (o *SshKeyUpdate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SshKeyUpdate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SshKeyUpdate) SetName(v string) {
	o.Name = v
}

func (o SshKeyUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SshKeyUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["default"] = o.Default
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *SshKeyUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"default",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSshKeyUpdate := _SshKeyUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSshKeyUpdate)

	if err != nil {
		return err
	}

	*o = SshKeyUpdate(varSshKeyUpdate)

	return err
}

type NullableSshKeyUpdate struct {
	value *SshKeyUpdate
	isSet bool
}

func (v NullableSshKeyUpdate) Get() *SshKeyUpdate {
	return v.value
}

func (v *NullableSshKeyUpdate) Set(val *SshKeyUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSshKeyUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSshKeyUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshKeyUpdate(val *SshKeyUpdate) *NullableSshKeyUpdate {
	return &NullableSshKeyUpdate{value: val, isSet: true}
}

func (v NullableSshKeyUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshKeyUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
