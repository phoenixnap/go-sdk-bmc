/*
Bare Metal Cloud API

Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmcapi

import (
	"encoding/json"
)

// checks if the StorageConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageConfiguration{}

// StorageConfiguration Storage configuration.
type StorageConfiguration struct {
	RootPartition        *StorageConfigurationRootPartition `json:"rootPartition,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageConfiguration StorageConfiguration

// NewStorageConfiguration instantiates a new StorageConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageConfiguration() *StorageConfiguration {
	this := StorageConfiguration{}
	return &this
}

// NewStorageConfigurationWithDefaults instantiates a new StorageConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageConfigurationWithDefaults() *StorageConfiguration {
	this := StorageConfiguration{}
	return &this
}

// GetRootPartition returns the RootPartition field value if set, zero value otherwise.
func (o *StorageConfiguration) GetRootPartition() StorageConfigurationRootPartition {
	if o == nil || IsNil(o.RootPartition) {
		var ret StorageConfigurationRootPartition
		return ret
	}
	return *o.RootPartition
}

// GetRootPartitionOk returns a tuple with the RootPartition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageConfiguration) GetRootPartitionOk() (*StorageConfigurationRootPartition, bool) {
	if o == nil || IsNil(o.RootPartition) {
		return nil, false
	}
	return o.RootPartition, true
}

// HasRootPartition returns a boolean if a field has been set.
func (o *StorageConfiguration) HasRootPartition() bool {
	if o != nil && !IsNil(o.RootPartition) {
		return true
	}

	return false
}

// SetRootPartition gets a reference to the given StorageConfigurationRootPartition and assigns it to the RootPartition field.
func (o *StorageConfiguration) SetRootPartition(v StorageConfigurationRootPartition) {
	o.RootPartition = &v
}

func (o StorageConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RootPartition) {
		toSerialize["rootPartition"] = o.RootPartition
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageConfiguration) UnmarshalJSON(data []byte) (err error) {
	varStorageConfiguration := _StorageConfiguration{}

	err = json.Unmarshal(data, &varStorageConfiguration)

	if err != nil {
		return err
	}

	*o = StorageConfiguration(varStorageConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rootPartition")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageConfiguration struct {
	value *StorageConfiguration
	isSet bool
}

func (v NullableStorageConfiguration) Get() *StorageConfiguration {
	return v.value
}

func (v *NullableStorageConfiguration) Set(val *StorageConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageConfiguration(val *StorageConfiguration) *NullableStorageConfiguration {
	return &NullableStorageConfiguration{value: val, isSet: true}
}

func (v NullableStorageConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
