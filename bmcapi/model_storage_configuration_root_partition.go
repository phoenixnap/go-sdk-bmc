/*
Bare Metal Cloud API

Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmcapi

import (
	"encoding/json"
)

// checks if the StorageConfigurationRootPartition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageConfigurationRootPartition{}

// StorageConfigurationRootPartition Root partition configuration.
type StorageConfigurationRootPartition struct {
	// Software RAID configuration. The following RAID options are available: NO_RAID, RAID_0, RAID_1.
	Raid *string `json:"raid,omitempty"`
	// The size of the root partition in GB. -1 to use all available space.
	Size                 *int32 `json:"size,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageConfigurationRootPartition StorageConfigurationRootPartition

// NewStorageConfigurationRootPartition instantiates a new StorageConfigurationRootPartition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageConfigurationRootPartition() *StorageConfigurationRootPartition {
	this := StorageConfigurationRootPartition{}
	var raid string = "NO_RAID"
	this.Raid = &raid
	var size int32 = -1
	this.Size = &size
	return &this
}

// NewStorageConfigurationRootPartitionWithDefaults instantiates a new StorageConfigurationRootPartition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageConfigurationRootPartitionWithDefaults() *StorageConfigurationRootPartition {
	this := StorageConfigurationRootPartition{}
	var raid string = "NO_RAID"
	this.Raid = &raid
	var size int32 = -1
	this.Size = &size
	return &this
}

// GetRaid returns the Raid field value if set, zero value otherwise.
func (o *StorageConfigurationRootPartition) GetRaid() string {
	if o == nil || IsNil(o.Raid) {
		var ret string
		return ret
	}
	return *o.Raid
}

// GetRaidOk returns a tuple with the Raid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageConfigurationRootPartition) GetRaidOk() (*string, bool) {
	if o == nil || IsNil(o.Raid) {
		return nil, false
	}
	return o.Raid, true
}

// HasRaid returns a boolean if a field has been set.
func (o *StorageConfigurationRootPartition) HasRaid() bool {
	if o != nil && !IsNil(o.Raid) {
		return true
	}

	return false
}

// SetRaid gets a reference to the given string and assigns it to the Raid field.
func (o *StorageConfigurationRootPartition) SetRaid(v string) {
	o.Raid = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *StorageConfigurationRootPartition) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageConfigurationRootPartition) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *StorageConfigurationRootPartition) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *StorageConfigurationRootPartition) SetSize(v int32) {
	o.Size = &v
}

func (o StorageConfigurationRootPartition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageConfigurationRootPartition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Raid) {
		toSerialize["raid"] = o.Raid
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageConfigurationRootPartition) UnmarshalJSON(data []byte) (err error) {
	varStorageConfigurationRootPartition := _StorageConfigurationRootPartition{}

	err = json.Unmarshal(data, &varStorageConfigurationRootPartition)

	if err != nil {
		return err
	}

	*o = StorageConfigurationRootPartition(varStorageConfigurationRootPartition)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "raid")
		delete(additionalProperties, "size")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageConfigurationRootPartition struct {
	value *StorageConfigurationRootPartition
	isSet bool
}

func (v NullableStorageConfigurationRootPartition) Get() *StorageConfigurationRootPartition {
	return v.value
}

func (v *NullableStorageConfigurationRootPartition) Set(val *StorageConfigurationRootPartition) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageConfigurationRootPartition) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageConfigurationRootPartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageConfigurationRootPartition(val *StorageConfigurationRootPartition) *NullableStorageConfigurationRootPartition {
	return &NullableStorageConfigurationRootPartition{value: val, isSet: true}
}

func (v NullableStorageConfigurationRootPartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageConfigurationRootPartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
