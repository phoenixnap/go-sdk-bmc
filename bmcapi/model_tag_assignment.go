/*
Bare Metal Cloud API

Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmcapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TagAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagAssignment{}

// TagAssignment Tag assigned to resource.
type TagAssignment struct {
	// The unique id of the tag.
	Id string `json:"id"`
	// The name of the tag.
	Name string `json:"name"`
	// The value of the tag assigned to the resource.
	Value *string `json:"value,omitempty"`
	// Whether or not to show the tag as part of billing and invoices
	IsBillingTag bool `json:"isBillingTag"`
	// Who the tag was created by.
	CreatedBy *string `json:"createdBy,omitempty"`
}

type _TagAssignment TagAssignment

// NewTagAssignment instantiates a new TagAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagAssignment(id string, name string, isBillingTag bool) *TagAssignment {
	this := TagAssignment{}
	this.Id = id
	this.Name = name
	this.IsBillingTag = isBillingTag
	return &this
}

// NewTagAssignmentWithDefaults instantiates a new TagAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagAssignmentWithDefaults() *TagAssignment {
	this := TagAssignment{}
	return &this
}

// GetId returns the Id field value
func (o *TagAssignment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TagAssignment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TagAssignment) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *TagAssignment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TagAssignment) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TagAssignment) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TagAssignment) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagAssignment) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TagAssignment) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TagAssignment) SetValue(v string) {
	o.Value = &v
}

// GetIsBillingTag returns the IsBillingTag field value
func (o *TagAssignment) GetIsBillingTag() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBillingTag
}

// GetIsBillingTagOk returns a tuple with the IsBillingTag field value
// and a boolean to check if the value has been set.
func (o *TagAssignment) GetIsBillingTagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBillingTag, true
}

// SetIsBillingTag sets field value
func (o *TagAssignment) SetIsBillingTag(v bool) {
	o.IsBillingTag = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *TagAssignment) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagAssignment) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *TagAssignment) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *TagAssignment) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

func (o TagAssignment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	toSerialize["isBillingTag"] = o.IsBillingTag
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	return toSerialize, nil
}

func (o *TagAssignment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"isBillingTag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagAssignment := _TagAssignment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagAssignment)

	if err != nil {
		return err
	}

	*o = TagAssignment(varTagAssignment)

	return err
}

type NullableTagAssignment struct {
	value *TagAssignment
	isSet bool
}

func (v NullableTagAssignment) Get() *TagAssignment {
	return v.value
}

func (v *NullableTagAssignment) Set(val *TagAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableTagAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableTagAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagAssignment(val *TagAssignment) *NullableTagAssignment {
	return &NullableTagAssignment{value: val, isSet: true}
}

func (v NullableTagAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
