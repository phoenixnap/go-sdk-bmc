/*
Bare Metal Cloud API

Testing ServersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package bmcapi

import (
	"context"
	"testing"

	openapiclient "github.com/phoenixnap/go-sdk-bmc/bmcapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_bmcapi_ServersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ServersAPIService DeletePrivateNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var privateNetworkId string

		resp, httpRes, err := apiClient.ServersAPI.DeletePrivateNetwork(context.Background(), serverId, privateNetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ServersAPI.ServersGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ServersAPI.ServersPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdActionsDeprovisionPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdActionsDeprovisionPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdActionsPowerOffPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdActionsPowerOffPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdActionsPowerOnPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdActionsPowerOnPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdActionsProvisionPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdActionsProvisionPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdActionsRebootPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdActionsRebootPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdActionsReservePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdActionsReservePost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdActionsResetPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdActionsResetPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdActionsShutdownPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdActionsShutdownPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdDelete(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdGet(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdIpBlocksIpBlockIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var ipBlockId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdIpBlocksIpBlockIdDelete(context.Background(), serverId, ipBlockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdIpBlocksPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdIpBlocksPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdPatch(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdPrivateNetworksPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var privateNetworkId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdPrivateNetworksPatch(context.Background(), serverId, privateNetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdPrivateNetworksPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdPrivateNetworksPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdPublicNetworksDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var publicNetworkId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdPublicNetworksDelete(context.Background(), serverId, publicNetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdPublicNetworksPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var publicNetworkId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdPublicNetworksPatch(context.Background(), serverId, publicNetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdPublicNetworksPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdPublicNetworksPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ServersServerIdTagsPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ServersAPI.ServersServerIdTagsPut(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
