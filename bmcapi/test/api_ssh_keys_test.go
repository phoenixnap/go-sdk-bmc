/*
Bare Metal Cloud API

Testing SSHKeysAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package bmcapi

import (
	"context"
	"testing"

	openapiclient "github.com/phoenixnap/go-sdk-bmc/bmcapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_bmcapi_SSHKeysAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SSHKeysAPIService SshKeysGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SSHKeysAPI.SshKeysGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHKeysAPIService SshKeysPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SSHKeysAPI.SshKeysPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHKeysAPIService SshKeysSshKeyIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var sshKeyId string

		resp, httpRes, err := apiClient.SSHKeysAPI.SshKeysSshKeyIdDelete(context.Background(), sshKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHKeysAPIService SshKeysSshKeyIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var sshKeyId string

		resp, httpRes, err := apiClient.SSHKeysAPI.SshKeysSshKeyIdGet(context.Background(), sshKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHKeysAPIService SshKeysSshKeyIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var sshKeyId string

		resp, httpRes, err := apiClient.SSHKeysAPI.SshKeysSshKeyIdPut(context.Background(), sshKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
