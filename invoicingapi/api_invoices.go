/*
Invoicing API

List, fetch and pay invoices with the Invoicing API.

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoicingapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
	"time"
)

type InvoicesAPI interface {

	/*
		InvoicesGet List invoices.

		List invoices.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiInvoicesGetRequest
	*/
	InvoicesGet(ctx context.Context) ApiInvoicesGetRequest

	// InvoicesGetExecute executes the request
	//  @return PaginatedInvoices
	InvoicesGetExecute(r ApiInvoicesGetRequest) (*PaginatedInvoices, *http.Response, error)

	/*
		InvoicesInvoiceIdGeneratePdfPost Generate invoice details as PDF.

		Generate invoice details as PDF.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param invoiceId The unique resource identifier of the Invoice.
		@return ApiInvoicesInvoiceIdGeneratePdfPostRequest
	*/
	InvoicesInvoiceIdGeneratePdfPost(ctx context.Context, invoiceId string) ApiInvoicesInvoiceIdGeneratePdfPostRequest

	// InvoicesInvoiceIdGeneratePdfPostExecute executes the request
	//  @return *os.File
	InvoicesInvoiceIdGeneratePdfPostExecute(r ApiInvoicesInvoiceIdGeneratePdfPostRequest) (*os.File, *http.Response, error)

	/*
		InvoicesInvoiceIdGet Get invoice details.

		Get invoice details.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param invoiceId The unique resource identifier of the Invoice.
		@return ApiInvoicesInvoiceIdGetRequest
	*/
	InvoicesInvoiceIdGet(ctx context.Context, invoiceId string) ApiInvoicesInvoiceIdGetRequest

	// InvoicesInvoiceIdGetExecute executes the request
	//  @return Invoice
	InvoicesInvoiceIdGetExecute(r ApiInvoicesInvoiceIdGetRequest) (*Invoice, *http.Response, error)

	/*
		InvoicesInvoiceIdPayPost Pay an invoice.

		Manually pay an invoice.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param invoiceId The unique resource identifier of the Invoice.
		@return ApiInvoicesInvoiceIdPayPostRequest
	*/
	InvoicesInvoiceIdPayPost(ctx context.Context, invoiceId string) ApiInvoicesInvoiceIdPayPostRequest

	// InvoicesInvoiceIdPayPostExecute executes the request
	//  @return map[string]interface{}
	InvoicesInvoiceIdPayPostExecute(r ApiInvoicesInvoiceIdPayPostRequest) (map[string]interface{}, *http.Response, error)
}

// InvoicesAPIService InvoicesAPI service
type InvoicesAPIService service

type ApiInvoicesGetRequest struct {
	ctx           context.Context
	ApiService    InvoicesAPI
	number        *string
	status        *string
	sentOnFrom    *time.Time
	sentOnTo      *time.Time
	limit         *int32
	offset        *int32
	sortField     *string
	sortDirection *string
}

// A user-friendly reference number assigned to the invoice.
func (r ApiInvoicesGetRequest) Number(number string) ApiInvoicesGetRequest {
	r.number = &number
	return r
}

// Payment status of the invoice.
func (r ApiInvoicesGetRequest) Status(status string) ApiInvoicesGetRequest {
	r.status = &status
	return r
}

// Minimum value to filter invoices by sent on date.
func (r ApiInvoicesGetRequest) SentOnFrom(sentOnFrom time.Time) ApiInvoicesGetRequest {
	r.sentOnFrom = &sentOnFrom
	return r
}

// Maximum value to filter invoices by sent on date.
func (r ApiInvoicesGetRequest) SentOnTo(sentOnTo time.Time) ApiInvoicesGetRequest {
	r.sentOnTo = &sentOnTo
	return r
}

// The limit of the number of results returned. The number of records returned may be smaller than the limit.
func (r ApiInvoicesGetRequest) Limit(limit int32) ApiInvoicesGetRequest {
	r.limit = &limit
	return r
}

// The number of items to skip in the results.
func (r ApiInvoicesGetRequest) Offset(offset int32) ApiInvoicesGetRequest {
	r.offset = &offset
	return r
}

// If a sortField is requested, pagination will be done after sorting. Default sorting is by number.
func (r ApiInvoicesGetRequest) SortField(sortField string) ApiInvoicesGetRequest {
	r.sortField = &sortField
	return r
}

// Sort Given Field depending on the desired direction. Default sorting is descending.
func (r ApiInvoicesGetRequest) SortDirection(sortDirection string) ApiInvoicesGetRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiInvoicesGetRequest) Execute() (*PaginatedInvoices, *http.Response, error) {
	return r.ApiService.InvoicesGetExecute(r)
}

/*
InvoicesGet List invoices.

List invoices.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInvoicesGetRequest
*/
func (a *InvoicesAPIService) InvoicesGet(ctx context.Context) ApiInvoicesGetRequest {
	return ApiInvoicesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return PaginatedInvoices
func (a *InvoicesAPIService) InvoicesGetExecute(r ApiInvoicesGetRequest) (*PaginatedInvoices, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedInvoices
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesAPIService.InvoicesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.sentOnFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sentOnFrom", r.sentOnFrom, "")
	}
	if r.sentOnTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sentOnTo", r.sentOnTo, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortField", r.sortField, "")
	} else {
		var defaultValue string = "sentOn"
		r.sortField = &defaultValue
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortDirection", r.sortDirection, "")
	} else {
		var defaultValue string = "DESC"
		r.sortDirection = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInvoicesInvoiceIdGeneratePdfPostRequest struct {
	ctx        context.Context
	ApiService InvoicesAPI
	invoiceId  string
}

func (r ApiInvoicesInvoiceIdGeneratePdfPostRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.InvoicesInvoiceIdGeneratePdfPostExecute(r)
}

/*
InvoicesInvoiceIdGeneratePdfPost Generate invoice details as PDF.

Generate invoice details as PDF.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param invoiceId The unique resource identifier of the Invoice.
 @return ApiInvoicesInvoiceIdGeneratePdfPostRequest
*/
func (a *InvoicesAPIService) InvoicesInvoiceIdGeneratePdfPost(ctx context.Context, invoiceId string) ApiInvoicesInvoiceIdGeneratePdfPostRequest {
	return ApiInvoicesInvoiceIdGeneratePdfPostRequest{
		ApiService: a,
		ctx:        ctx,
		invoiceId:  invoiceId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *InvoicesAPIService) InvoicesInvoiceIdGeneratePdfPostExecute(r ApiInvoicesInvoiceIdGeneratePdfPostRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesAPIService.InvoicesInvoiceIdGeneratePdfPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/{invoiceId}/actions/generate-pdf"
	localVarPath = strings.Replace(localVarPath, "{"+"invoiceId"+"}", url.PathEscape(parameterValueToString(r.invoiceId, "invoiceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pdf", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInvoicesInvoiceIdGetRequest struct {
	ctx        context.Context
	ApiService InvoicesAPI
	invoiceId  string
}

func (r ApiInvoicesInvoiceIdGetRequest) Execute() (*Invoice, *http.Response, error) {
	return r.ApiService.InvoicesInvoiceIdGetExecute(r)
}

/*
InvoicesInvoiceIdGet Get invoice details.

Get invoice details.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param invoiceId The unique resource identifier of the Invoice.
 @return ApiInvoicesInvoiceIdGetRequest
*/
func (a *InvoicesAPIService) InvoicesInvoiceIdGet(ctx context.Context, invoiceId string) ApiInvoicesInvoiceIdGetRequest {
	return ApiInvoicesInvoiceIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		invoiceId:  invoiceId,
	}
}

// Execute executes the request
//  @return Invoice
func (a *InvoicesAPIService) InvoicesInvoiceIdGetExecute(r ApiInvoicesInvoiceIdGetRequest) (*Invoice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Invoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesAPIService.InvoicesInvoiceIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/{invoiceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"invoiceId"+"}", url.PathEscape(parameterValueToString(r.invoiceId, "invoiceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInvoicesInvoiceIdPayPostRequest struct {
	ctx        context.Context
	ApiService InvoicesAPI
	invoiceId  string
	body       *map[string]interface{}
}

func (r ApiInvoicesInvoiceIdPayPostRequest) Body(body map[string]interface{}) ApiInvoicesInvoiceIdPayPostRequest {
	r.body = &body
	return r
}

func (r ApiInvoicesInvoiceIdPayPostRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.InvoicesInvoiceIdPayPostExecute(r)
}

/*
InvoicesInvoiceIdPayPost Pay an invoice.

Manually pay an invoice.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param invoiceId The unique resource identifier of the Invoice.
 @return ApiInvoicesInvoiceIdPayPostRequest
*/
func (a *InvoicesAPIService) InvoicesInvoiceIdPayPost(ctx context.Context, invoiceId string) ApiInvoicesInvoiceIdPayPostRequest {
	return ApiInvoicesInvoiceIdPayPostRequest{
		ApiService: a,
		ctx:        ctx,
		invoiceId:  invoiceId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *InvoicesAPIService) InvoicesInvoiceIdPayPostExecute(r ApiInvoicesInvoiceIdPayPostRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesAPIService.InvoicesInvoiceIdPayPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/{invoiceId}/actions/pay"
	localVarPath = strings.Replace(localVarPath, "{"+"invoiceId"+"}", url.PathEscape(parameterValueToString(r.invoiceId, "invoiceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
