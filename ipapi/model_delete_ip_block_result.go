/*
IP Addresses API

Public IP blocks are a set of contiguous IPs that allow you to access your servers or networks from the internet. Use the IP Addresses API to request and delete IP blocks.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/public-ip-management#bmc-public-ip-allocations-api' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/ips/v1/)</b>

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipapi

import (
	"encoding/json"
)

// checks if the DeleteIpBlockResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteIpBlockResult{}

// DeleteIpBlockResult Result of a successful delete action.
type DeleteIpBlockResult struct {
	// IP Block has been deleted.
	Result *string `json:"result,omitempty"`
	// The unique identifier of the IP Block.
	IpBlockId            *string `json:"ipBlockId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeleteIpBlockResult DeleteIpBlockResult

// NewDeleteIpBlockResult instantiates a new DeleteIpBlockResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteIpBlockResult() *DeleteIpBlockResult {
	this := DeleteIpBlockResult{}
	return &this
}

// NewDeleteIpBlockResultWithDefaults instantiates a new DeleteIpBlockResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteIpBlockResultWithDefaults() *DeleteIpBlockResult {
	this := DeleteIpBlockResult{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *DeleteIpBlockResult) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteIpBlockResult) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *DeleteIpBlockResult) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *DeleteIpBlockResult) SetResult(v string) {
	o.Result = &v
}

// GetIpBlockId returns the IpBlockId field value if set, zero value otherwise.
func (o *DeleteIpBlockResult) GetIpBlockId() string {
	if o == nil || IsNil(o.IpBlockId) {
		var ret string
		return ret
	}
	return *o.IpBlockId
}

// GetIpBlockIdOk returns a tuple with the IpBlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteIpBlockResult) GetIpBlockIdOk() (*string, bool) {
	if o == nil || IsNil(o.IpBlockId) {
		return nil, false
	}
	return o.IpBlockId, true
}

// HasIpBlockId returns a boolean if a field has been set.
func (o *DeleteIpBlockResult) HasIpBlockId() bool {
	if o != nil && !IsNil(o.IpBlockId) {
		return true
	}

	return false
}

// SetIpBlockId gets a reference to the given string and assigns it to the IpBlockId field.
func (o *DeleteIpBlockResult) SetIpBlockId(v string) {
	o.IpBlockId = &v
}

func (o DeleteIpBlockResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteIpBlockResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.IpBlockId) {
		toSerialize["ipBlockId"] = o.IpBlockId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeleteIpBlockResult) UnmarshalJSON(data []byte) (err error) {
	varDeleteIpBlockResult := _DeleteIpBlockResult{}

	err = json.Unmarshal(data, &varDeleteIpBlockResult)

	if err != nil {
		return err
	}

	*o = DeleteIpBlockResult(varDeleteIpBlockResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "result")
		delete(additionalProperties, "ipBlockId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeleteIpBlockResult struct {
	value *DeleteIpBlockResult
	isSet bool
}

func (v NullableDeleteIpBlockResult) Get() *DeleteIpBlockResult {
	return v.value
}

func (v *NullableDeleteIpBlockResult) Set(val *DeleteIpBlockResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteIpBlockResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteIpBlockResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteIpBlockResult(val *DeleteIpBlockResult) *NullableDeleteIpBlockResult {
	return &NullableDeleteIpBlockResult{value: val, isSet: true}
}

func (v NullableDeleteIpBlockResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteIpBlockResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
