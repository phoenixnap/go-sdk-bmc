/*
IP Addresses API

Testing IPBlocksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ipapi

import (
	"context"
	"testing"

	openapiclient "github.com/phoenixnap/go-sdk-bmc/ipapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_ipapi_IPBlocksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IPBlocksAPIService IpBlocksGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.IPBlocksAPI.IpBlocksGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPBlocksAPIService IpBlocksIpBlockIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ipBlockId string

		resp, httpRes, err := apiClient.IPBlocksAPI.IpBlocksIpBlockIdDelete(context.Background(), ipBlockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPBlocksAPIService IpBlocksIpBlockIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ipBlockId string

		resp, httpRes, err := apiClient.IPBlocksAPI.IpBlocksIpBlockIdGet(context.Background(), ipBlockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPBlocksAPIService IpBlocksIpBlockIdPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ipBlockId string

		resp, httpRes, err := apiClient.IPBlocksAPI.IpBlocksIpBlockIdPatch(context.Background(), ipBlockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPBlocksAPIService IpBlocksIpBlockIdTagsPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ipBlockId string

		resp, httpRes, err := apiClient.IPBlocksAPI.IpBlocksIpBlockIdTagsPut(context.Background(), ipBlockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPBlocksAPIService IpBlocksPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.IPBlocksAPI.IpBlocksPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
