/*
Locations API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package locationapi

import (
	"encoding/json"
)

// Location Location resource
type Location struct {
	Location            LocationEnum      `json:"location"`
	LocationDescription *string           `json:"locationDescription,omitempty"`
	ProductCategories   []ProductCategory `json:"productCategories,omitempty"`
}

// NewLocation instantiates a new Location object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocation(location LocationEnum) *Location {
	this := Location{}
	this.Location = location
	return &this
}

// NewLocationWithDefaults instantiates a new Location object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationWithDefaults() *Location {
	this := Location{}
	return &this
}

// GetLocation returns the Location field value
func (o *Location) GetLocation() LocationEnum {
	if o == nil {
		var ret LocationEnum
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *Location) GetLocationOk() (*LocationEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *Location) SetLocation(v LocationEnum) {
	o.Location = v
}

// GetLocationDescription returns the LocationDescription field value if set, zero value otherwise.
func (o *Location) GetLocationDescription() string {
	if o == nil || o.LocationDescription == nil {
		var ret string
		return ret
	}
	return *o.LocationDescription
}

// GetLocationDescriptionOk returns a tuple with the LocationDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetLocationDescriptionOk() (*string, bool) {
	if o == nil || o.LocationDescription == nil {
		return nil, false
	}
	return o.LocationDescription, true
}

// HasLocationDescription returns a boolean if a field has been set.
func (o *Location) HasLocationDescription() bool {
	if o != nil && o.LocationDescription != nil {
		return true
	}

	return false
}

// SetLocationDescription gets a reference to the given string and assigns it to the LocationDescription field.
func (o *Location) SetLocationDescription(v string) {
	o.LocationDescription = &v
}

// GetProductCategories returns the ProductCategories field value if set, zero value otherwise.
func (o *Location) GetProductCategories() []ProductCategory {
	if o == nil || o.ProductCategories == nil {
		var ret []ProductCategory
		return ret
	}
	return o.ProductCategories
}

// GetProductCategoriesOk returns a tuple with the ProductCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetProductCategoriesOk() ([]ProductCategory, bool) {
	if o == nil || o.ProductCategories == nil {
		return nil, false
	}
	return o.ProductCategories, true
}

// HasProductCategories returns a boolean if a field has been set.
func (o *Location) HasProductCategories() bool {
	if o != nil && o.ProductCategories != nil {
		return true
	}

	return false
}

// SetProductCategories gets a reference to the given []ProductCategory and assigns it to the ProductCategories field.
func (o *Location) SetProductCategories(v []ProductCategory) {
	o.ProductCategories = v
}

func (o Location) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["location"] = o.Location
	}
	if o.LocationDescription != nil {
		toSerialize["locationDescription"] = o.LocationDescription
	}
	if o.ProductCategories != nil {
		toSerialize["productCategories"] = o.ProductCategories
	}
	return json.Marshal(toSerialize)
}

type NullableLocation struct {
	value *Location
	isSet bool
}

func (v NullableLocation) Get() *Location {
	return v.value
}

func (v *NullableLocation) Set(val *Location) {
	v.value = val
	v.isSet = true
}

func (v NullableLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocation(val *Location) *NullableLocation {
	return &NullableLocation{value: val, isSet: true}
}

func (v NullableLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
