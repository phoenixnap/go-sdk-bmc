/*
Locations API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package locationapi

import (
	"encoding/json"
	"fmt"
)

// LocationEnum The location code.
type LocationEnum string

// List of LocationEnum
const (
	PHX LocationEnum = "PHX"
	ASH LocationEnum = "ASH"
	NLD LocationEnum = "NLD"
	SGP LocationEnum = "SGP"
	CHI LocationEnum = "CHI"
	SEA LocationEnum = "SEA"
	AUS LocationEnum = "AUS"
)

// All allowed values of LocationEnum enum
var AllowedLocationEnumEnumValues = []LocationEnum{
	"PHX",
	"ASH",
	"NLD",
	"SGP",
	"CHI",
	"SEA",
	"AUS",
}

func (v *LocationEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocationEnum(value)
	for _, existing := range AllowedLocationEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocationEnum", value)
}

// NewLocationEnumFromValue returns a pointer to a valid LocationEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationEnumFromValue(v string) (*LocationEnum, error) {
	ev := LocationEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocationEnum: valid values are %v", v, AllowedLocationEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocationEnum) IsValid() bool {
	for _, existing := range AllowedLocationEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LocationEnum value
func (v LocationEnum) Ptr() *LocationEnum {
	return &v
}

type NullableLocationEnum struct {
	value *LocationEnum
	isSet bool
}

func (v NullableLocationEnum) Get() *LocationEnum {
	return v.value
}

func (v *NullableLocationEnum) Set(val *LocationEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationEnum(val *LocationEnum) *NullableLocationEnum {
	return &NullableLocationEnum{value: val, isSet: true}
}

func (v NullableLocationEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
