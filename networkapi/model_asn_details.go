/*
Networks API

Create, list, edit and delete public/private networks with the Network API. Use public networks to place multiple  servers on the same network or VLAN. Assign new servers with IP addresses from the same CIDR range. Use private  networks to avoid unnecessary egress data charges. Model your networks according to your business needs.<br> <br> <span class='pnap-api-knowledge-base-link'> Helpful knowledge base articles are available for  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#multi-private-backend-network-api' target='_blank'>multi-private backend networks</a>,  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#ftoc-heading-15' target='_blank'>public networks</a> and <a href='https://phoenixnap.com/kb/border-gateway-protocol-bmc' target='_blank'>border gateway protocol peer groups</a>. </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/networks/v1/)</b>

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AsnDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsnDetails{}

// AsnDetails BGP Peer Group ASN details.
type AsnDetails struct {
	// The BGP Peer Group ASN.
	Asn int64 `json:"asn"`
	// True if the BGP Peer Group ASN is a `bring your own` ASN.
	IsBringYourOwn bool `json:"isBringYourOwn"`
	// The BGP Peer Group ASN verification status. Can have one of the following values: `PENDING_VERIFICATION`, `FAILED_VERIFICATION` and `VERIFIED`.
	VerificationStatus string `json:"verificationStatus"`
	// The BGP Peer Group ASN verification reason for the respective status.
	VerificationReason   *string `json:"verificationReason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AsnDetails AsnDetails

// NewAsnDetails instantiates a new AsnDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsnDetails(asn int64, isBringYourOwn bool, verificationStatus string) *AsnDetails {
	this := AsnDetails{}
	this.Asn = asn
	this.IsBringYourOwn = isBringYourOwn
	this.VerificationStatus = verificationStatus
	return &this
}

// NewAsnDetailsWithDefaults instantiates a new AsnDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsnDetailsWithDefaults() *AsnDetails {
	this := AsnDetails{}
	return &this
}

// GetAsn returns the Asn field value
func (o *AsnDetails) GetAsn() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Asn
}

// GetAsnOk returns a tuple with the Asn field value
// and a boolean to check if the value has been set.
func (o *AsnDetails) GetAsnOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asn, true
}

// SetAsn sets field value
func (o *AsnDetails) SetAsn(v int64) {
	o.Asn = v
}

// GetIsBringYourOwn returns the IsBringYourOwn field value
func (o *AsnDetails) GetIsBringYourOwn() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBringYourOwn
}

// GetIsBringYourOwnOk returns a tuple with the IsBringYourOwn field value
// and a boolean to check if the value has been set.
func (o *AsnDetails) GetIsBringYourOwnOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBringYourOwn, true
}

// SetIsBringYourOwn sets field value
func (o *AsnDetails) SetIsBringYourOwn(v bool) {
	o.IsBringYourOwn = v
}

// GetVerificationStatus returns the VerificationStatus field value
func (o *AsnDetails) GetVerificationStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VerificationStatus
}

// GetVerificationStatusOk returns a tuple with the VerificationStatus field value
// and a boolean to check if the value has been set.
func (o *AsnDetails) GetVerificationStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VerificationStatus, true
}

// SetVerificationStatus sets field value
func (o *AsnDetails) SetVerificationStatus(v string) {
	o.VerificationStatus = v
}

// GetVerificationReason returns the VerificationReason field value if set, zero value otherwise.
func (o *AsnDetails) GetVerificationReason() string {
	if o == nil || IsNil(o.VerificationReason) {
		var ret string
		return ret
	}
	return *o.VerificationReason
}

// GetVerificationReasonOk returns a tuple with the VerificationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsnDetails) GetVerificationReasonOk() (*string, bool) {
	if o == nil || IsNil(o.VerificationReason) {
		return nil, false
	}
	return o.VerificationReason, true
}

// HasVerificationReason returns a boolean if a field has been set.
func (o *AsnDetails) HasVerificationReason() bool {
	if o != nil && !IsNil(o.VerificationReason) {
		return true
	}

	return false
}

// SetVerificationReason gets a reference to the given string and assigns it to the VerificationReason field.
func (o *AsnDetails) SetVerificationReason(v string) {
	o.VerificationReason = &v
}

func (o AsnDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsnDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asn"] = o.Asn
	toSerialize["isBringYourOwn"] = o.IsBringYourOwn
	toSerialize["verificationStatus"] = o.VerificationStatus
	if !IsNil(o.VerificationReason) {
		toSerialize["verificationReason"] = o.VerificationReason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AsnDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asn",
		"isBringYourOwn",
		"verificationStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAsnDetails := _AsnDetails{}

	err = json.Unmarshal(data, &varAsnDetails)

	if err != nil {
		return err
	}

	*o = AsnDetails(varAsnDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asn")
		delete(additionalProperties, "isBringYourOwn")
		delete(additionalProperties, "verificationStatus")
		delete(additionalProperties, "verificationReason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAsnDetails struct {
	value *AsnDetails
	isSet bool
}

func (v NullableAsnDetails) Get() *AsnDetails {
	return v.value
}

func (v *NullableAsnDetails) Set(val *AsnDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAsnDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAsnDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsnDetails(val *AsnDetails) *NullableAsnDetails {
	return &NullableAsnDetails{value: val, isSet: true}
}

func (v NullableAsnDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsnDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
