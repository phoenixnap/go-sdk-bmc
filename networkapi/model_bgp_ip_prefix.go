/*
Networks API

Create, list, edit and delete public/private networks with the Network API. Use public networks to place multiple  servers on the same network or VLAN. Assign new servers with IP addresses from the same CIDR range. Use private  networks to avoid unnecessary egress data charges. Model your networks according to your business needs.<br> <br> <span class='pnap-api-knowledge-base-link'> Helpful knowledge base articles are available for  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#multi-private-backend-network-api' target='_blank'>multi-private backend networks</a>,  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#ftoc-heading-15' target='_blank'>public networks</a> and <a href='https://phoenixnap.com/kb/border-gateway-protocol-bmc' target='_blank'>border gateway protocol peer groups</a>. </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/networks/v1/)</b>

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkapi

import (
	"encoding/json"
	"fmt"
)

// checks if the BgpIpPrefix type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpIpPrefix{}

// BgpIpPrefix The BGP IP Prefix.
type BgpIpPrefix struct {
	// IP allocation ID.
	IpAllocationId string `json:"ipAllocationId"`
	// The IP block in CIDR format, dependent on IP version.
	Cidr string `json:"cidr"`
	// The IP block version.
	IpVersion string `json:"ipVersion"`
	// The BGP IP Prefix status. Can have one of the following values: `PENDING`, `BUSY`, `READY`, `ERROR` and `DELETING`.
	Status               string `json:"status"`
	AdditionalProperties map[string]interface{}
}

type _BgpIpPrefix BgpIpPrefix

// NewBgpIpPrefix instantiates a new BgpIpPrefix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpIpPrefix(ipAllocationId string, cidr string, ipVersion string, status string) *BgpIpPrefix {
	this := BgpIpPrefix{}
	this.IpAllocationId = ipAllocationId
	this.Cidr = cidr
	this.IpVersion = ipVersion
	this.Status = status
	return &this
}

// NewBgpIpPrefixWithDefaults instantiates a new BgpIpPrefix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpIpPrefixWithDefaults() *BgpIpPrefix {
	this := BgpIpPrefix{}
	return &this
}

// GetIpAllocationId returns the IpAllocationId field value
func (o *BgpIpPrefix) GetIpAllocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAllocationId
}

// GetIpAllocationIdOk returns a tuple with the IpAllocationId field value
// and a boolean to check if the value has been set.
func (o *BgpIpPrefix) GetIpAllocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAllocationId, true
}

// SetIpAllocationId sets field value
func (o *BgpIpPrefix) SetIpAllocationId(v string) {
	o.IpAllocationId = v
}

// GetCidr returns the Cidr field value
func (o *BgpIpPrefix) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *BgpIpPrefix) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *BgpIpPrefix) SetCidr(v string) {
	o.Cidr = v
}

// GetIpVersion returns the IpVersion field value
func (o *BgpIpPrefix) GetIpVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpVersion
}

// GetIpVersionOk returns a tuple with the IpVersion field value
// and a boolean to check if the value has been set.
func (o *BgpIpPrefix) GetIpVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpVersion, true
}

// SetIpVersion sets field value
func (o *BgpIpPrefix) SetIpVersion(v string) {
	o.IpVersion = v
}

// GetStatus returns the Status field value
func (o *BgpIpPrefix) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BgpIpPrefix) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BgpIpPrefix) SetStatus(v string) {
	o.Status = v
}

func (o BgpIpPrefix) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpIpPrefix) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ipAllocationId"] = o.IpAllocationId
	toSerialize["cidr"] = o.Cidr
	toSerialize["ipVersion"] = o.IpVersion
	toSerialize["status"] = o.Status

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpIpPrefix) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ipAllocationId",
		"cidr",
		"ipVersion",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBgpIpPrefix := _BgpIpPrefix{}

	err = json.Unmarshal(data, &varBgpIpPrefix)

	if err != nil {
		return err
	}

	*o = BgpIpPrefix(varBgpIpPrefix)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ipAllocationId")
		delete(additionalProperties, "cidr")
		delete(additionalProperties, "ipVersion")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpIpPrefix struct {
	value *BgpIpPrefix
	isSet bool
}

func (v NullableBgpIpPrefix) Get() *BgpIpPrefix {
	return v.value
}

func (v *NullableBgpIpPrefix) Set(val *BgpIpPrefix) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpIpPrefix) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpIpPrefix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpIpPrefix(val *BgpIpPrefix) *NullableBgpIpPrefix {
	return &NullableBgpIpPrefix{value: val, isSet: true}
}

func (v NullableBgpIpPrefix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpIpPrefix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
