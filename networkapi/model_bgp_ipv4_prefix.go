/*
Networks API

Create, list, edit and delete public/private networks with the Network API. Use public networks to place multiple  servers on the same network or VLAN. Assign new servers with IP addresses from the same CIDR range. Use private  networks to avoid unnecessary egress data charges. Model your networks according to your business needs.<br> <br> <span class='pnap-api-knowledge-base-link'> Helpful knowledge base articles are available for  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#multi-private-backend-network-api' target='_blank'>multi-private backend networks</a>,  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#ftoc-heading-15' target='_blank'>public networks</a> and <a href='https://phoenixnap.com/kb/border-gateway-protocol-bmc' target='_blank'>border gateway protocol peer groups</a>. </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/networks/v1/)</b>

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkapi

import (
	"encoding/json"
	"fmt"
)

// checks if the BgpIPv4Prefix type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpIPv4Prefix{}

// BgpIPv4Prefix The BGP IPv4 Prefix. Deprecated in favour of generic BgpIpPrefix.
type BgpIPv4Prefix struct {
	// IPv4 allocation ID.
	Ipv4AllocationId string `json:"ipv4AllocationId"`
	// The IP block in CIDR format.
	Cidr string `json:"cidr"`
	// The BGP IPv4 Prefix status. Can have one of the following values: `PENDING`, `BUSY`, `READY`, `ERROR` and `DELETING`.
	Status string `json:"status"`
	// Identifies IP as a `bring your own` IP block.
	IsBringYourOwnIp bool `json:"isBringYourOwnIp"`
	// The Boolean value of the BGP IPv4 Prefix is in use.
	InUse                bool `json:"inUse"`
	AdditionalProperties map[string]interface{}
}

type _BgpIPv4Prefix BgpIPv4Prefix

// NewBgpIPv4Prefix instantiates a new BgpIPv4Prefix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpIPv4Prefix(ipv4AllocationId string, cidr string, status string, isBringYourOwnIp bool, inUse bool) *BgpIPv4Prefix {
	this := BgpIPv4Prefix{}
	this.Ipv4AllocationId = ipv4AllocationId
	this.Cidr = cidr
	this.Status = status
	this.IsBringYourOwnIp = isBringYourOwnIp
	this.InUse = inUse
	return &this
}

// NewBgpIPv4PrefixWithDefaults instantiates a new BgpIPv4Prefix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpIPv4PrefixWithDefaults() *BgpIPv4Prefix {
	this := BgpIPv4Prefix{}
	return &this
}

// GetIpv4AllocationId returns the Ipv4AllocationId field value
func (o *BgpIPv4Prefix) GetIpv4AllocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ipv4AllocationId
}

// GetIpv4AllocationIdOk returns a tuple with the Ipv4AllocationId field value
// and a boolean to check if the value has been set.
func (o *BgpIPv4Prefix) GetIpv4AllocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv4AllocationId, true
}

// SetIpv4AllocationId sets field value
func (o *BgpIPv4Prefix) SetIpv4AllocationId(v string) {
	o.Ipv4AllocationId = v
}

// GetCidr returns the Cidr field value
func (o *BgpIPv4Prefix) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *BgpIPv4Prefix) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *BgpIPv4Prefix) SetCidr(v string) {
	o.Cidr = v
}

// GetStatus returns the Status field value
func (o *BgpIPv4Prefix) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BgpIPv4Prefix) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BgpIPv4Prefix) SetStatus(v string) {
	o.Status = v
}

// GetIsBringYourOwnIp returns the IsBringYourOwnIp field value
func (o *BgpIPv4Prefix) GetIsBringYourOwnIp() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBringYourOwnIp
}

// GetIsBringYourOwnIpOk returns a tuple with the IsBringYourOwnIp field value
// and a boolean to check if the value has been set.
func (o *BgpIPv4Prefix) GetIsBringYourOwnIpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBringYourOwnIp, true
}

// SetIsBringYourOwnIp sets field value
func (o *BgpIPv4Prefix) SetIsBringYourOwnIp(v bool) {
	o.IsBringYourOwnIp = v
}

// GetInUse returns the InUse field value
func (o *BgpIPv4Prefix) GetInUse() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InUse
}

// GetInUseOk returns a tuple with the InUse field value
// and a boolean to check if the value has been set.
func (o *BgpIPv4Prefix) GetInUseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InUse, true
}

// SetInUse sets field value
func (o *BgpIPv4Prefix) SetInUse(v bool) {
	o.InUse = v
}

func (o BgpIPv4Prefix) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpIPv4Prefix) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ipv4AllocationId"] = o.Ipv4AllocationId
	toSerialize["cidr"] = o.Cidr
	toSerialize["status"] = o.Status
	toSerialize["isBringYourOwnIp"] = o.IsBringYourOwnIp
	toSerialize["inUse"] = o.InUse

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpIPv4Prefix) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ipv4AllocationId",
		"cidr",
		"status",
		"isBringYourOwnIp",
		"inUse",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBgpIPv4Prefix := _BgpIPv4Prefix{}

	err = json.Unmarshal(data, &varBgpIPv4Prefix)

	if err != nil {
		return err
	}

	*o = BgpIPv4Prefix(varBgpIPv4Prefix)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ipv4AllocationId")
		delete(additionalProperties, "cidr")
		delete(additionalProperties, "status")
		delete(additionalProperties, "isBringYourOwnIp")
		delete(additionalProperties, "inUse")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpIPv4Prefix struct {
	value *BgpIPv4Prefix
	isSet bool
}

func (v NullableBgpIPv4Prefix) Get() *BgpIPv4Prefix {
	return v.value
}

func (v *NullableBgpIPv4Prefix) Set(val *BgpIPv4Prefix) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpIPv4Prefix) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpIPv4Prefix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpIPv4Prefix(val *BgpIPv4Prefix) *NullableBgpIPv4Prefix {
	return &NullableBgpIPv4Prefix{value: val, isSet: true}
}

func (v NullableBgpIPv4Prefix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpIPv4Prefix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
