/*
Networks API

Create, list, edit and delete public/private networks with the Network API. Use public networks to place multiple  servers on the same network or VLAN. Assign new servers with IP addresses from the same CIDR range. Use private  networks to avoid unnecessary egress data charges. Model your networks according to your business needs.<br> <br> <span class='pnap-api-knowledge-base-link'> Helpful knowledge base articles are available for  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#multi-private-backend-network-api' target='_blank'>multi-private backend networks</a>,  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#ftoc-heading-15' target='_blank'>public networks</a> and <a href='https://phoenixnap.com/kb/border-gateway-protocol-bmc' target='_blank'>border gateway protocol peer groups</a>. </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/networks/v1/)</b>

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkapi

import (
	"encoding/json"
	"fmt"
)

// checks if the BgpPeerGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpPeerGroup{}

// BgpPeerGroup The Border Gateway Protocol (BGP) Peer Group.
type BgpPeerGroup struct {
	// The unique identifier of the BGP Peer Group.
	Id string `json:"id"`
	// The BGP Peer Group status. Can have one of the following values: `PENDING`, `BUSY`, `READY`, `ERROR`, `PENDING_DELETION` and `DELETING`.
	Status string `json:"status"`
	// The BGP Peer Group location. Can have one of the following values: `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
	Location string `json:"location"`
	// The List of the BGP Peer Group IPv4 prefixes.
	Ipv4Prefixes     []BgpIPv4Prefix `json:"ipv4Prefixes"`
	TargetAsnDetails AsnDetails      `json:"targetAsnDetails"`
	ActiveAsnDetails *AsnDetails     `json:"activeAsnDetails,omitempty"`
	// The BGP Peer Group password.
	Password string `json:"password"`
	// The Advertised routes for the BGP Peer Group. Can have one of the following values: `DEFAULT` and `NONE`.
	AdvertisedRoutes string `json:"advertisedRoutes"`
	// The RPKI ROA Origin ASN of the BGP Peer Group based on location.
	RpkiRoaOriginAsn int64 `json:"rpkiRoaOriginAsn"`
	// The eBGP Multi-hop of the BGP Peer Group.
	EBgpMultiHop int32 `json:"eBgpMultiHop"`
	// The IPv4 Peering Loopback addresses of the BGP Peer Group. Valid IP formats are IPv4 addresses.
	PeeringLoopbacksV4 []string `json:"peeringLoopbacksV4"`
	// The Keep Alive Timer in seconds of the BGP Peer Group.
	KeepAliveTimerSeconds int32 `json:"keepAliveTimerSeconds"`
	// The Hold Timer in seconds of the BGP Peer Group.
	HoldTimerSeconds int32 `json:"holdTimerSeconds"`
	// Date and time of creation.
	CreatedOn *string `json:"createdOn,omitempty"`
	// Date and time of last update.
	LastUpdatedOn        *string `json:"lastUpdatedOn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BgpPeerGroup BgpPeerGroup

// NewBgpPeerGroup instantiates a new BgpPeerGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpPeerGroup(id string, status string, location string, ipv4Prefixes []BgpIPv4Prefix, targetAsnDetails AsnDetails, password string, advertisedRoutes string, rpkiRoaOriginAsn int64, eBgpMultiHop int32, peeringLoopbacksV4 []string, keepAliveTimerSeconds int32, holdTimerSeconds int32) *BgpPeerGroup {
	this := BgpPeerGroup{}
	this.Id = id
	this.Status = status
	this.Location = location
	this.Ipv4Prefixes = ipv4Prefixes
	this.TargetAsnDetails = targetAsnDetails
	this.Password = password
	this.AdvertisedRoutes = advertisedRoutes
	this.RpkiRoaOriginAsn = rpkiRoaOriginAsn
	this.EBgpMultiHop = eBgpMultiHop
	this.PeeringLoopbacksV4 = peeringLoopbacksV4
	this.KeepAliveTimerSeconds = keepAliveTimerSeconds
	this.HoldTimerSeconds = holdTimerSeconds
	return &this
}

// NewBgpPeerGroupWithDefaults instantiates a new BgpPeerGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpPeerGroupWithDefaults() *BgpPeerGroup {
	this := BgpPeerGroup{}
	return &this
}

// GetId returns the Id field value
func (o *BgpPeerGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BgpPeerGroup) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *BgpPeerGroup) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BgpPeerGroup) SetStatus(v string) {
	o.Status = v
}

// GetLocation returns the Location field value
func (o *BgpPeerGroup) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *BgpPeerGroup) SetLocation(v string) {
	o.Location = v
}

// GetIpv4Prefixes returns the Ipv4Prefixes field value
func (o *BgpPeerGroup) GetIpv4Prefixes() []BgpIPv4Prefix {
	if o == nil {
		var ret []BgpIPv4Prefix
		return ret
	}

	return o.Ipv4Prefixes
}

// GetIpv4PrefixesOk returns a tuple with the Ipv4Prefixes field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetIpv4PrefixesOk() ([]BgpIPv4Prefix, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ipv4Prefixes, true
}

// SetIpv4Prefixes sets field value
func (o *BgpPeerGroup) SetIpv4Prefixes(v []BgpIPv4Prefix) {
	o.Ipv4Prefixes = v
}

// GetTargetAsnDetails returns the TargetAsnDetails field value
func (o *BgpPeerGroup) GetTargetAsnDetails() AsnDetails {
	if o == nil {
		var ret AsnDetails
		return ret
	}

	return o.TargetAsnDetails
}

// GetTargetAsnDetailsOk returns a tuple with the TargetAsnDetails field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetTargetAsnDetailsOk() (*AsnDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetAsnDetails, true
}

// SetTargetAsnDetails sets field value
func (o *BgpPeerGroup) SetTargetAsnDetails(v AsnDetails) {
	o.TargetAsnDetails = v
}

// GetActiveAsnDetails returns the ActiveAsnDetails field value if set, zero value otherwise.
func (o *BgpPeerGroup) GetActiveAsnDetails() AsnDetails {
	if o == nil || IsNil(o.ActiveAsnDetails) {
		var ret AsnDetails
		return ret
	}
	return *o.ActiveAsnDetails
}

// GetActiveAsnDetailsOk returns a tuple with the ActiveAsnDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetActiveAsnDetailsOk() (*AsnDetails, bool) {
	if o == nil || IsNil(o.ActiveAsnDetails) {
		return nil, false
	}
	return o.ActiveAsnDetails, true
}

// HasActiveAsnDetails returns a boolean if a field has been set.
func (o *BgpPeerGroup) HasActiveAsnDetails() bool {
	if o != nil && !IsNil(o.ActiveAsnDetails) {
		return true
	}

	return false
}

// SetActiveAsnDetails gets a reference to the given AsnDetails and assigns it to the ActiveAsnDetails field.
func (o *BgpPeerGroup) SetActiveAsnDetails(v AsnDetails) {
	o.ActiveAsnDetails = &v
}

// GetPassword returns the Password field value
func (o *BgpPeerGroup) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *BgpPeerGroup) SetPassword(v string) {
	o.Password = v
}

// GetAdvertisedRoutes returns the AdvertisedRoutes field value
func (o *BgpPeerGroup) GetAdvertisedRoutes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdvertisedRoutes
}

// GetAdvertisedRoutesOk returns a tuple with the AdvertisedRoutes field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetAdvertisedRoutesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdvertisedRoutes, true
}

// SetAdvertisedRoutes sets field value
func (o *BgpPeerGroup) SetAdvertisedRoutes(v string) {
	o.AdvertisedRoutes = v
}

// GetRpkiRoaOriginAsn returns the RpkiRoaOriginAsn field value
func (o *BgpPeerGroup) GetRpkiRoaOriginAsn() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RpkiRoaOriginAsn
}

// GetRpkiRoaOriginAsnOk returns a tuple with the RpkiRoaOriginAsn field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetRpkiRoaOriginAsnOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RpkiRoaOriginAsn, true
}

// SetRpkiRoaOriginAsn sets field value
func (o *BgpPeerGroup) SetRpkiRoaOriginAsn(v int64) {
	o.RpkiRoaOriginAsn = v
}

// GetEBgpMultiHop returns the EBgpMultiHop field value
func (o *BgpPeerGroup) GetEBgpMultiHop() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EBgpMultiHop
}

// GetEBgpMultiHopOk returns a tuple with the EBgpMultiHop field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetEBgpMultiHopOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EBgpMultiHop, true
}

// SetEBgpMultiHop sets field value
func (o *BgpPeerGroup) SetEBgpMultiHop(v int32) {
	o.EBgpMultiHop = v
}

// GetPeeringLoopbacksV4 returns the PeeringLoopbacksV4 field value
func (o *BgpPeerGroup) GetPeeringLoopbacksV4() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PeeringLoopbacksV4
}

// GetPeeringLoopbacksV4Ok returns a tuple with the PeeringLoopbacksV4 field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetPeeringLoopbacksV4Ok() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PeeringLoopbacksV4, true
}

// SetPeeringLoopbacksV4 sets field value
func (o *BgpPeerGroup) SetPeeringLoopbacksV4(v []string) {
	o.PeeringLoopbacksV4 = v
}

// GetKeepAliveTimerSeconds returns the KeepAliveTimerSeconds field value
func (o *BgpPeerGroup) GetKeepAliveTimerSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KeepAliveTimerSeconds
}

// GetKeepAliveTimerSecondsOk returns a tuple with the KeepAliveTimerSeconds field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetKeepAliveTimerSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeepAliveTimerSeconds, true
}

// SetKeepAliveTimerSeconds sets field value
func (o *BgpPeerGroup) SetKeepAliveTimerSeconds(v int32) {
	o.KeepAliveTimerSeconds = v
}

// GetHoldTimerSeconds returns the HoldTimerSeconds field value
func (o *BgpPeerGroup) GetHoldTimerSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HoldTimerSeconds
}

// GetHoldTimerSecondsOk returns a tuple with the HoldTimerSeconds field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetHoldTimerSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HoldTimerSeconds, true
}

// SetHoldTimerSeconds sets field value
func (o *BgpPeerGroup) SetHoldTimerSeconds(v int32) {
	o.HoldTimerSeconds = v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *BgpPeerGroup) GetCreatedOn() string {
	if o == nil || IsNil(o.CreatedOn) {
		var ret string
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetCreatedOnOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedOn) {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *BgpPeerGroup) HasCreatedOn() bool {
	if o != nil && !IsNil(o.CreatedOn) {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given string and assigns it to the CreatedOn field.
func (o *BgpPeerGroup) SetCreatedOn(v string) {
	o.CreatedOn = &v
}

// GetLastUpdatedOn returns the LastUpdatedOn field value if set, zero value otherwise.
func (o *BgpPeerGroup) GetLastUpdatedOn() string {
	if o == nil || IsNil(o.LastUpdatedOn) {
		var ret string
		return ret
	}
	return *o.LastUpdatedOn
}

// GetLastUpdatedOnOk returns a tuple with the LastUpdatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpPeerGroup) GetLastUpdatedOnOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdatedOn) {
		return nil, false
	}
	return o.LastUpdatedOn, true
}

// HasLastUpdatedOn returns a boolean if a field has been set.
func (o *BgpPeerGroup) HasLastUpdatedOn() bool {
	if o != nil && !IsNil(o.LastUpdatedOn) {
		return true
	}

	return false
}

// SetLastUpdatedOn gets a reference to the given string and assigns it to the LastUpdatedOn field.
func (o *BgpPeerGroup) SetLastUpdatedOn(v string) {
	o.LastUpdatedOn = &v
}

func (o BgpPeerGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpPeerGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	toSerialize["location"] = o.Location
	toSerialize["ipv4Prefixes"] = o.Ipv4Prefixes
	toSerialize["targetAsnDetails"] = o.TargetAsnDetails
	if !IsNil(o.ActiveAsnDetails) {
		toSerialize["activeAsnDetails"] = o.ActiveAsnDetails
	}
	toSerialize["password"] = o.Password
	toSerialize["advertisedRoutes"] = o.AdvertisedRoutes
	toSerialize["rpkiRoaOriginAsn"] = o.RpkiRoaOriginAsn
	toSerialize["eBgpMultiHop"] = o.EBgpMultiHop
	toSerialize["peeringLoopbacksV4"] = o.PeeringLoopbacksV4
	toSerialize["keepAliveTimerSeconds"] = o.KeepAliveTimerSeconds
	toSerialize["holdTimerSeconds"] = o.HoldTimerSeconds
	if !IsNil(o.CreatedOn) {
		toSerialize["createdOn"] = o.CreatedOn
	}
	if !IsNil(o.LastUpdatedOn) {
		toSerialize["lastUpdatedOn"] = o.LastUpdatedOn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpPeerGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"status",
		"location",
		"ipv4Prefixes",
		"targetAsnDetails",
		"password",
		"advertisedRoutes",
		"rpkiRoaOriginAsn",
		"eBgpMultiHop",
		"peeringLoopbacksV4",
		"keepAliveTimerSeconds",
		"holdTimerSeconds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBgpPeerGroup := _BgpPeerGroup{}

	err = json.Unmarshal(data, &varBgpPeerGroup)

	if err != nil {
		return err
	}

	*o = BgpPeerGroup(varBgpPeerGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "location")
		delete(additionalProperties, "ipv4Prefixes")
		delete(additionalProperties, "targetAsnDetails")
		delete(additionalProperties, "activeAsnDetails")
		delete(additionalProperties, "password")
		delete(additionalProperties, "advertisedRoutes")
		delete(additionalProperties, "rpkiRoaOriginAsn")
		delete(additionalProperties, "eBgpMultiHop")
		delete(additionalProperties, "peeringLoopbacksV4")
		delete(additionalProperties, "keepAliveTimerSeconds")
		delete(additionalProperties, "holdTimerSeconds")
		delete(additionalProperties, "createdOn")
		delete(additionalProperties, "lastUpdatedOn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpPeerGroup struct {
	value *BgpPeerGroup
	isSet bool
}

func (v NullableBgpPeerGroup) Get() *BgpPeerGroup {
	return v.value
}

func (v *NullableBgpPeerGroup) Set(val *BgpPeerGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpPeerGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpPeerGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpPeerGroup(val *BgpPeerGroup) *NullableBgpPeerGroup {
	return &NullableBgpPeerGroup{value: val, isSet: true}
}

func (v NullableBgpPeerGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpPeerGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
