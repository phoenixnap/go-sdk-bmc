/*
Networks API

Create, list, edit and delete public/private networks with the Network API. Use public networks to place multiple  servers on the same network or VLAN. Assign new servers with IP addresses from the same CIDR range. Use private  networks to avoid unnecessary egress data charges. Model your networks according to your business needs.<br> <br> <span class='pnap-api-knowledge-base-link'> Helpful knowledge base articles are available for  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#multi-private-backend-network-api' target='_blank'>multi-private backend networks</a>,  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#ftoc-heading-15' target='_blank'>public networks</a> and <a href='https://phoenixnap.com/kb/border-gateway-protocol-bmc' target='_blank'>border gateway protocol peer groups</a>. </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/networks/v1/)</b>

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkapi

import (
	"encoding/json"
	"fmt"
)

// checks if the BgpPeerGroupCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpPeerGroupCreate{}

// BgpPeerGroupCreate Create a BGP Peer Group.
type BgpPeerGroupCreate struct {
	// The BGP Peer Group location. Can have one of the following values: `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
	Location string `json:"location"`
	// The BGP Peer Group ASN.
	Asn int64 `json:"asn"`
	// The BGP Peer Group password.
	Password *string `json:"password,omitempty"`
	// The Advertised routes for the BGP Peer Group. Can have one of the following values: `DEFAULT` and `NONE`.
	AdvertisedRoutes     string `json:"advertisedRoutes"`
	AdditionalProperties map[string]interface{}
}

type _BgpPeerGroupCreate BgpPeerGroupCreate

// NewBgpPeerGroupCreate instantiates a new BgpPeerGroupCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpPeerGroupCreate(location string, asn int64, advertisedRoutes string) *BgpPeerGroupCreate {
	this := BgpPeerGroupCreate{}
	this.Location = location
	this.Asn = asn
	this.AdvertisedRoutes = advertisedRoutes
	return &this
}

// NewBgpPeerGroupCreateWithDefaults instantiates a new BgpPeerGroupCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpPeerGroupCreateWithDefaults() *BgpPeerGroupCreate {
	this := BgpPeerGroupCreate{}
	var asn int64 = 65401
	this.Asn = asn
	var advertisedRoutes string = "NONE"
	this.AdvertisedRoutes = advertisedRoutes
	return &this
}

// GetLocation returns the Location field value
func (o *BgpPeerGroupCreate) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroupCreate) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *BgpPeerGroupCreate) SetLocation(v string) {
	o.Location = v
}

// GetAsn returns the Asn field value
func (o *BgpPeerGroupCreate) GetAsn() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Asn
}

// GetAsnOk returns a tuple with the Asn field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroupCreate) GetAsnOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asn, true
}

// SetAsn sets field value
func (o *BgpPeerGroupCreate) SetAsn(v int64) {
	o.Asn = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *BgpPeerGroupCreate) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpPeerGroupCreate) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *BgpPeerGroupCreate) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *BgpPeerGroupCreate) SetPassword(v string) {
	o.Password = &v
}

// GetAdvertisedRoutes returns the AdvertisedRoutes field value
func (o *BgpPeerGroupCreate) GetAdvertisedRoutes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdvertisedRoutes
}

// GetAdvertisedRoutesOk returns a tuple with the AdvertisedRoutes field value
// and a boolean to check if the value has been set.
func (o *BgpPeerGroupCreate) GetAdvertisedRoutesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdvertisedRoutes, true
}

// SetAdvertisedRoutes sets field value
func (o *BgpPeerGroupCreate) SetAdvertisedRoutes(v string) {
	o.AdvertisedRoutes = v
}

func (o BgpPeerGroupCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpPeerGroupCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["location"] = o.Location
	toSerialize["asn"] = o.Asn
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	toSerialize["advertisedRoutes"] = o.AdvertisedRoutes

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpPeerGroupCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"location",
		"asn",
		"advertisedRoutes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBgpPeerGroupCreate := _BgpPeerGroupCreate{}

	err = json.Unmarshal(data, &varBgpPeerGroupCreate)

	if err != nil {
		return err
	}

	*o = BgpPeerGroupCreate(varBgpPeerGroupCreate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "location")
		delete(additionalProperties, "asn")
		delete(additionalProperties, "password")
		delete(additionalProperties, "advertisedRoutes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpPeerGroupCreate struct {
	value *BgpPeerGroupCreate
	isSet bool
}

func (v NullableBgpPeerGroupCreate) Get() *BgpPeerGroupCreate {
	return v.value
}

func (v *NullableBgpPeerGroupCreate) Set(val *BgpPeerGroupCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpPeerGroupCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpPeerGroupCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpPeerGroupCreate(val *BgpPeerGroupCreate) *NullableBgpPeerGroupCreate {
	return &NullableBgpPeerGroupCreate{value: val, isSet: true}
}

func (v NullableBgpPeerGroupCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpPeerGroupCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
