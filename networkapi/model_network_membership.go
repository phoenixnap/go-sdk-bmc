/*
Networks API

Create, list, edit and delete public/private networks with the Network API. Use public networks to place multiple  servers on the same network or VLAN. Assign new servers with IP addresses from the same CIDR range. Use private  networks to avoid unnecessary egress data charges. Model your networks according to your business needs.<br> <br> <span class='pnap-api-knowledge-base-link'> Helpful knowledge base articles are available for  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#multi-private-backend-network-api' target='_blank'>multi-private backend networks</a> and <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#ftoc-heading-15' target='_blank'>public networks</a>. </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/networks/v1/)</b>

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkapi

import (
	"encoding/json"
)

// NetworkMembership Resource details linked to the Network.
type NetworkMembership struct {
	// The resource identifier.
	ResourceId string `json:"resourceId"`
	// The resource's type.
	ResourceType string `json:"resourceType"`
	// List of IPs associated to the resource.
	Ips []string `json:"ips"`
}

// NewNetworkMembership instantiates a new NetworkMembership object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkMembership(resourceId string, resourceType string, ips []string) *NetworkMembership {
	this := NetworkMembership{}
	this.ResourceId = resourceId
	this.ResourceType = resourceType
	this.Ips = ips
	return &this
}

// NewNetworkMembershipWithDefaults instantiates a new NetworkMembership object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkMembershipWithDefaults() *NetworkMembership {
	this := NetworkMembership{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *NetworkMembership) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *NetworkMembership) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *NetworkMembership) SetResourceId(v string) {
	o.ResourceId = v
}

// GetResourceType returns the ResourceType field value
func (o *NetworkMembership) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *NetworkMembership) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *NetworkMembership) SetResourceType(v string) {
	o.ResourceType = v
}

// GetIps returns the Ips field value
func (o *NetworkMembership) GetIps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value
// and a boolean to check if the value has been set.
func (o *NetworkMembership) GetIpsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ips, true
}

// SetIps sets field value
func (o *NetworkMembership) SetIps(v []string) {
	o.Ips = v
}

func (o NetworkMembership) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resourceId"] = o.ResourceId
	}
	if true {
		toSerialize["resourceType"] = o.ResourceType
	}
	if true {
		toSerialize["ips"] = o.Ips
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkMembership struct {
	value *NetworkMembership
	isSet bool
}

func (v NullableNetworkMembership) Get() *NetworkMembership {
	return v.value
}

func (v *NullableNetworkMembership) Set(val *NetworkMembership) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkMembership) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkMembership) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkMembership(val *NetworkMembership) *NullableNetworkMembership {
	return &NullableNetworkMembership{value: val, isSet: true}
}

func (v NullableNetworkMembership) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkMembership) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
