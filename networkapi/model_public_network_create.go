/*
Networks API

Create, list, edit and delete public/private networks with the Network API. Use public networks to place multiple  servers on the same network or VLAN. Assign new servers with IP addresses from the same CIDR range. Use private  networks to avoid unnecessary egress data charges. Model your networks according to your business needs.<br> <br> <span class='pnap-api-knowledge-base-link'> Helpful knowledge base articles are available for  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#multi-private-backend-network-api' target='_blank'>multi-private backend networks</a> and <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#ftoc-heading-15' target='_blank'>public networks</a>. </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/networks/v1/)</b>

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkapi

import (
	"encoding/json"
)

// PublicNetworkCreate Details of Public Network to be created.
type PublicNetworkCreate struct {
	// The friendly name of this public network. This name should be unique.
	Name string `json:"name"`
	// The description of this public network.
	Description *string `json:"description,omitempty"`
	// The location of this public network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
	Location string `json:"location"`
	// A list of IP Blocks that will be associated with this public network.
	IpBlocks []PublicNetworkIpBlock `json:"ipBlocks,omitempty"`
}

// NewPublicNetworkCreate instantiates a new PublicNetworkCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicNetworkCreate(name string, location string) *PublicNetworkCreate {
	this := PublicNetworkCreate{}
	this.Name = name
	this.Location = location
	return &this
}

// NewPublicNetworkCreateWithDefaults instantiates a new PublicNetworkCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicNetworkCreateWithDefaults() *PublicNetworkCreate {
	this := PublicNetworkCreate{}
	return &this
}

// GetName returns the Name field value
func (o *PublicNetworkCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicNetworkCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicNetworkCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PublicNetworkCreate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicNetworkCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PublicNetworkCreate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PublicNetworkCreate) SetDescription(v string) {
	o.Description = &v
}

// GetLocation returns the Location field value
func (o *PublicNetworkCreate) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *PublicNetworkCreate) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *PublicNetworkCreate) SetLocation(v string) {
	o.Location = v
}

// GetIpBlocks returns the IpBlocks field value if set, zero value otherwise.
func (o *PublicNetworkCreate) GetIpBlocks() []PublicNetworkIpBlock {
	if o == nil || o.IpBlocks == nil {
		var ret []PublicNetworkIpBlock
		return ret
	}
	return o.IpBlocks
}

// GetIpBlocksOk returns a tuple with the IpBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicNetworkCreate) GetIpBlocksOk() ([]PublicNetworkIpBlock, bool) {
	if o == nil || o.IpBlocks == nil {
		return nil, false
	}
	return o.IpBlocks, true
}

// HasIpBlocks returns a boolean if a field has been set.
func (o *PublicNetworkCreate) HasIpBlocks() bool {
	if o != nil && o.IpBlocks != nil {
		return true
	}

	return false
}

// SetIpBlocks gets a reference to the given []PublicNetworkIpBlock and assigns it to the IpBlocks field.
func (o *PublicNetworkCreate) SetIpBlocks(v []PublicNetworkIpBlock) {
	o.IpBlocks = v
}

func (o PublicNetworkCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["location"] = o.Location
	}
	if o.IpBlocks != nil {
		toSerialize["ipBlocks"] = o.IpBlocks
	}
	return json.Marshal(toSerialize)
}

type NullablePublicNetworkCreate struct {
	value *PublicNetworkCreate
	isSet bool
}

func (v NullablePublicNetworkCreate) Get() *PublicNetworkCreate {
	return v.value
}

func (v *NullablePublicNetworkCreate) Set(val *PublicNetworkCreate) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicNetworkCreate) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicNetworkCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicNetworkCreate(val *PublicNetworkCreate) *NullablePublicNetworkCreate {
	return &NullablePublicNetworkCreate{value: val, isSet: true}
}

func (v NullablePublicNetworkCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicNetworkCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
