/*
Networks API

Testing PublicNetworksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package networkapi

import (
	"context"
	"testing"

	openapiclient "github.com/phoenixnap/go-sdk-bmc/networkapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_networkapi_PublicNetworksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PublicNetworksAPIService PublicNetworksGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PublicNetworksAPI.PublicNetworksGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicNetworksAPIService PublicNetworksNetworkIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var publicNetworkId string

		httpRes, err := apiClient.PublicNetworksAPI.PublicNetworksNetworkIdDelete(context.Background(), publicNetworkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicNetworksAPIService PublicNetworksNetworkIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var publicNetworkId string

		resp, httpRes, err := apiClient.PublicNetworksAPI.PublicNetworksNetworkIdGet(context.Background(), publicNetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicNetworksAPIService PublicNetworksNetworkIdIpBlocksIpBlockIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var publicNetworkId string
		var ipBlockId string

		resp, httpRes, err := apiClient.PublicNetworksAPI.PublicNetworksNetworkIdIpBlocksIpBlockIdDelete(context.Background(), publicNetworkId, ipBlockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicNetworksAPIService PublicNetworksNetworkIdIpBlocksPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var publicNetworkId string

		resp, httpRes, err := apiClient.PublicNetworksAPI.PublicNetworksNetworkIdIpBlocksPost(context.Background(), publicNetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicNetworksAPIService PublicNetworksNetworkIdPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var publicNetworkId string

		resp, httpRes, err := apiClient.PublicNetworksAPI.PublicNetworksNetworkIdPatch(context.Background(), publicNetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicNetworksAPIService PublicNetworksPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PublicNetworksAPI.PublicNetworksPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
