/*
Network Storage API

Create, list, edit, and delete storage networks with the Network Storage API. Use storage networks to expand storage capacity on a private network. <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/bare-metal-cloud-storage' target='_blank'>here</a> </span> <br> <b>All URLs are relative to (https://api.phoenixnap.com/network-storage/v1/)</b>

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkstorageapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

type StorageNetworksApi interface {

	/*
		StorageNetworksGet List all storage networks.

		List all storage networks.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiStorageNetworksGetRequest
	*/
	StorageNetworksGet(ctx context.Context) ApiStorageNetworksGetRequest

	// StorageNetworksGetExecute executes the request
	//  @return []StorageNetwork
	StorageNetworksGetExecute(r ApiStorageNetworksGetRequest) ([]StorageNetwork, *http.Response, error)

	/*
		StorageNetworksIdDelete Delete a storage network and its volume.

		Delete a storage network and its volume. A storage network can only be removed if it's not in 'BUSY' state. Billing stops on storage network deletion.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param storageId ID of the storage.
		@return ApiStorageNetworksIdDeleteRequest
	*/
	StorageNetworksIdDelete(ctx context.Context, storageId string) ApiStorageNetworksIdDeleteRequest

	// StorageNetworksIdDeleteExecute executes the request
	StorageNetworksIdDeleteExecute(r ApiStorageNetworksIdDeleteRequest) (*http.Response, error)

	/*
		StorageNetworksIdGet Get storage network details.

		Get storage network details.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param storageId ID of the storage.
		@return ApiStorageNetworksIdGetRequest
	*/
	StorageNetworksIdGet(ctx context.Context, storageId string) ApiStorageNetworksIdGetRequest

	// StorageNetworksIdGetExecute executes the request
	//  @return StorageNetwork
	StorageNetworksIdGetExecute(r ApiStorageNetworksIdGetRequest) (*StorageNetwork, *http.Response, error)

	/*
		StorageNetworksIdPatch Update storage network details.

		Update storage network details.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param storageId ID of the storage.
		@return ApiStorageNetworksIdPatchRequest
	*/
	StorageNetworksIdPatch(ctx context.Context, storageId string) ApiStorageNetworksIdPatchRequest

	// StorageNetworksIdPatchExecute executes the request
	//  @return StorageNetwork
	StorageNetworksIdPatchExecute(r ApiStorageNetworksIdPatchRequest) (*StorageNetwork, *http.Response, error)

	/*
		StorageNetworksPost Create a storage network and volume.

		Create a storage network and volume.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiStorageNetworksPostRequest
	*/
	StorageNetworksPost(ctx context.Context) ApiStorageNetworksPostRequest

	// StorageNetworksPostExecute executes the request
	//  @return StorageNetwork
	StorageNetworksPostExecute(r ApiStorageNetworksPostRequest) (*StorageNetwork, *http.Response, error)

	/*
		StorageNetworksStorageNetworkIdVolumesGet Display one or more volumes belonging to a storage network.

		Display one or more volumes belonging to a storage network.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param storageId ID of the storage.
		@return ApiStorageNetworksStorageNetworkIdVolumesGetRequest
	*/
	StorageNetworksStorageNetworkIdVolumesGet(ctx context.Context, storageId string) ApiStorageNetworksStorageNetworkIdVolumesGetRequest

	// StorageNetworksStorageNetworkIdVolumesGetExecute executes the request
	//  @return []Volume
	StorageNetworksStorageNetworkIdVolumesGetExecute(r ApiStorageNetworksStorageNetworkIdVolumesGetRequest) ([]Volume, *http.Response, error)

	/*
		StorageNetworksStorageNetworkIdVolumesPost Create a volume belonging to a storage network.

		Create a volume belonging to a storage network.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param storageId ID of the storage.
		@return ApiStorageNetworksStorageNetworkIdVolumesPostRequest
	*/
	StorageNetworksStorageNetworkIdVolumesPost(ctx context.Context, storageId string) ApiStorageNetworksStorageNetworkIdVolumesPostRequest

	// StorageNetworksStorageNetworkIdVolumesPostExecute executes the request
	//  @return Volume
	StorageNetworksStorageNetworkIdVolumesPostExecute(r ApiStorageNetworksStorageNetworkIdVolumesPostRequest) (*Volume, *http.Response, error)

	/*
		StorageNetworksStorageNetworkIdVolumesVolumeIdDelete Delete a Storage Network's Volume

		Delete a Storage Network's Volume

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param storageId ID of the storage.
		@param volumeId ID of volume.
		@return ApiStorageNetworksStorageNetworkIdVolumesVolumeIdDeleteRequest
	*/
	StorageNetworksStorageNetworkIdVolumesVolumeIdDelete(ctx context.Context, storageId string, volumeId string) ApiStorageNetworksStorageNetworkIdVolumesVolumeIdDeleteRequest

	// StorageNetworksStorageNetworkIdVolumesVolumeIdDeleteExecute executes the request
	StorageNetworksStorageNetworkIdVolumesVolumeIdDeleteExecute(r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdDeleteRequest) (*http.Response, error)

	/*
		StorageNetworksStorageNetworkIdVolumesVolumeIdGet Get a storage network's volume details.

		Get a storage network's volume details.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param storageId ID of the storage.
		@param volumeId ID of volume.
		@return ApiStorageNetworksStorageNetworkIdVolumesVolumeIdGetRequest
	*/
	StorageNetworksStorageNetworkIdVolumesVolumeIdGet(ctx context.Context, storageId string, volumeId string) ApiStorageNetworksStorageNetworkIdVolumesVolumeIdGetRequest

	// StorageNetworksStorageNetworkIdVolumesVolumeIdGetExecute executes the request
	//  @return Volume
	StorageNetworksStorageNetworkIdVolumesVolumeIdGetExecute(r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdGetRequest) (*Volume, *http.Response, error)

	/*
		StorageNetworksStorageNetworkIdVolumesVolumeIdPatch Update a storage network's volume details.

		Update a storage network's volume details.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param storageId ID of the storage.
		@param volumeId ID of volume.
		@return ApiStorageNetworksStorageNetworkIdVolumesVolumeIdPatchRequest
	*/
	StorageNetworksStorageNetworkIdVolumesVolumeIdPatch(ctx context.Context, storageId string, volumeId string) ApiStorageNetworksStorageNetworkIdVolumesVolumeIdPatchRequest

	// StorageNetworksStorageNetworkIdVolumesVolumeIdPatchExecute executes the request
	//  @return Volume
	StorageNetworksStorageNetworkIdVolumesVolumeIdPatchExecute(r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdPatchRequest) (*Volume, *http.Response, error)

	/*
		StorageNetworksStorageNetworkIdVolumesVolumeIdTagsPut Overwrites tags assigned for the volume.

		Overwrites tags assigned for the volume.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param storageId ID of the storage.
		@param volumeId ID of volume.
		@return ApiStorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutRequest
	*/
	StorageNetworksStorageNetworkIdVolumesVolumeIdTagsPut(ctx context.Context, storageId string, volumeId string) ApiStorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutRequest

	// StorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutExecute executes the request
	//  @return Volume
	StorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutExecute(r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutRequest) (*Volume, *http.Response, error)
}

// StorageNetworksApiService StorageNetworksApi service
type StorageNetworksApiService service

type ApiStorageNetworksGetRequest struct {
	ctx        context.Context
	ApiService StorageNetworksApi
	location   *string
}

// If present will filter the result by the given location.
func (r ApiStorageNetworksGetRequest) Location(location string) ApiStorageNetworksGetRequest {
	r.location = &location
	return r
}

func (r ApiStorageNetworksGetRequest) Execute() ([]StorageNetwork, *http.Response, error) {
	return r.ApiService.StorageNetworksGetExecute(r)
}

/*
StorageNetworksGet List all storage networks.

List all storage networks.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStorageNetworksGetRequest
*/
func (a *StorageNetworksApiService) StorageNetworksGet(ctx context.Context) ApiStorageNetworksGetRequest {
	return ApiStorageNetworksGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return []StorageNetwork
func (a *StorageNetworksApiService) StorageNetworksGetExecute(r ApiStorageNetworksGetRequest) ([]StorageNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []StorageNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageNetworksApiService.StorageNetworksGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-networks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.location != nil {
		localVarQueryParams.Add("location", parameterToString(*r.location, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageNetworksIdDeleteRequest struct {
	ctx        context.Context
	ApiService StorageNetworksApi
	storageId  string
}

func (r ApiStorageNetworksIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.StorageNetworksIdDeleteExecute(r)
}

/*
StorageNetworksIdDelete Delete a storage network and its volume.

Delete a storage network and its volume. A storage network can only be removed if it's not in 'BUSY' state. Billing stops on storage network deletion.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param storageId ID of the storage.
 @return ApiStorageNetworksIdDeleteRequest
*/
func (a *StorageNetworksApiService) StorageNetworksIdDelete(ctx context.Context, storageId string) ApiStorageNetworksIdDeleteRequest {
	return ApiStorageNetworksIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		storageId:  storageId,
	}
}

// Execute executes the request
func (a *StorageNetworksApiService) StorageNetworksIdDeleteExecute(r ApiStorageNetworksIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageNetworksApiService.StorageNetworksIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-networks/{storageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", url.PathEscape(parameterToString(r.storageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiStorageNetworksIdGetRequest struct {
	ctx        context.Context
	ApiService StorageNetworksApi
	storageId  string
}

func (r ApiStorageNetworksIdGetRequest) Execute() (*StorageNetwork, *http.Response, error) {
	return r.ApiService.StorageNetworksIdGetExecute(r)
}

/*
StorageNetworksIdGet Get storage network details.

Get storage network details.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param storageId ID of the storage.
 @return ApiStorageNetworksIdGetRequest
*/
func (a *StorageNetworksApiService) StorageNetworksIdGet(ctx context.Context, storageId string) ApiStorageNetworksIdGetRequest {
	return ApiStorageNetworksIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		storageId:  storageId,
	}
}

// Execute executes the request
//  @return StorageNetwork
func (a *StorageNetworksApiService) StorageNetworksIdGetExecute(r ApiStorageNetworksIdGetRequest) (*StorageNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageNetworksApiService.StorageNetworksIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-networks/{storageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", url.PathEscape(parameterToString(r.storageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageNetworksIdPatchRequest struct {
	ctx                  context.Context
	ApiService           StorageNetworksApi
	storageId            string
	storageNetworkUpdate *StorageNetworkUpdate
}

// Storage network to be updated.
func (r ApiStorageNetworksIdPatchRequest) StorageNetworkUpdate(storageNetworkUpdate StorageNetworkUpdate) ApiStorageNetworksIdPatchRequest {
	r.storageNetworkUpdate = &storageNetworkUpdate
	return r
}

func (r ApiStorageNetworksIdPatchRequest) Execute() (*StorageNetwork, *http.Response, error) {
	return r.ApiService.StorageNetworksIdPatchExecute(r)
}

/*
StorageNetworksIdPatch Update storage network details.

Update storage network details.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param storageId ID of the storage.
 @return ApiStorageNetworksIdPatchRequest
*/
func (a *StorageNetworksApiService) StorageNetworksIdPatch(ctx context.Context, storageId string) ApiStorageNetworksIdPatchRequest {
	return ApiStorageNetworksIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		storageId:  storageId,
	}
}

// Execute executes the request
//  @return StorageNetwork
func (a *StorageNetworksApiService) StorageNetworksIdPatchExecute(r ApiStorageNetworksIdPatchRequest) (*StorageNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageNetworksApiService.StorageNetworksIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-networks/{storageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", url.PathEscape(parameterToString(r.storageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.storageNetworkUpdate == nil {
		return localVarReturnValue, nil, reportError("storageNetworkUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.storageNetworkUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageNetworksPostRequest struct {
	ctx                  context.Context
	ApiService           StorageNetworksApi
	storageNetworkCreate *StorageNetworkCreate
}

func (r ApiStorageNetworksPostRequest) StorageNetworkCreate(storageNetworkCreate StorageNetworkCreate) ApiStorageNetworksPostRequest {
	r.storageNetworkCreate = &storageNetworkCreate
	return r
}

func (r ApiStorageNetworksPostRequest) Execute() (*StorageNetwork, *http.Response, error) {
	return r.ApiService.StorageNetworksPostExecute(r)
}

/*
StorageNetworksPost Create a storage network and volume.

Create a storage network and volume.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStorageNetworksPostRequest
*/
func (a *StorageNetworksApiService) StorageNetworksPost(ctx context.Context) ApiStorageNetworksPostRequest {
	return ApiStorageNetworksPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return StorageNetwork
func (a *StorageNetworksApiService) StorageNetworksPostExecute(r ApiStorageNetworksPostRequest) (*StorageNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageNetworksApiService.StorageNetworksPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-networks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.storageNetworkCreate == nil {
		return localVarReturnValue, nil, reportError("storageNetworkCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.storageNetworkCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageNetworksStorageNetworkIdVolumesGetRequest struct {
	ctx        context.Context
	ApiService StorageNetworksApi
	storageId  string
	tag        *[]string
}

// A list of query parameters related to tags in the form of tagName.tagValue
func (r ApiStorageNetworksStorageNetworkIdVolumesGetRequest) Tag(tag []string) ApiStorageNetworksStorageNetworkIdVolumesGetRequest {
	r.tag = &tag
	return r
}

func (r ApiStorageNetworksStorageNetworkIdVolumesGetRequest) Execute() ([]Volume, *http.Response, error) {
	return r.ApiService.StorageNetworksStorageNetworkIdVolumesGetExecute(r)
}

/*
StorageNetworksStorageNetworkIdVolumesGet Display one or more volumes belonging to a storage network.

Display one or more volumes belonging to a storage network.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param storageId ID of the storage.
 @return ApiStorageNetworksStorageNetworkIdVolumesGetRequest
*/
func (a *StorageNetworksApiService) StorageNetworksStorageNetworkIdVolumesGet(ctx context.Context, storageId string) ApiStorageNetworksStorageNetworkIdVolumesGetRequest {
	return ApiStorageNetworksStorageNetworkIdVolumesGetRequest{
		ApiService: a,
		ctx:        ctx,
		storageId:  storageId,
	}
}

// Execute executes the request
//  @return []Volume
func (a *StorageNetworksApiService) StorageNetworksStorageNetworkIdVolumesGetExecute(r ApiStorageNetworksStorageNetworkIdVolumesGetRequest) ([]Volume, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Volume
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageNetworksApiService.StorageNetworksStorageNetworkIdVolumesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-networks/{storageId}/volumes"
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", url.PathEscape(parameterToString(r.storageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageNetworksStorageNetworkIdVolumesPostRequest struct {
	ctx          context.Context
	ApiService   StorageNetworksApi
	storageId    string
	volumeCreate *VolumeCreate
}

func (r ApiStorageNetworksStorageNetworkIdVolumesPostRequest) VolumeCreate(volumeCreate VolumeCreate) ApiStorageNetworksStorageNetworkIdVolumesPostRequest {
	r.volumeCreate = &volumeCreate
	return r
}

func (r ApiStorageNetworksStorageNetworkIdVolumesPostRequest) Execute() (*Volume, *http.Response, error) {
	return r.ApiService.StorageNetworksStorageNetworkIdVolumesPostExecute(r)
}

/*
StorageNetworksStorageNetworkIdVolumesPost Create a volume belonging to a storage network.

Create a volume belonging to a storage network.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param storageId ID of the storage.
 @return ApiStorageNetworksStorageNetworkIdVolumesPostRequest
*/
func (a *StorageNetworksApiService) StorageNetworksStorageNetworkIdVolumesPost(ctx context.Context, storageId string) ApiStorageNetworksStorageNetworkIdVolumesPostRequest {
	return ApiStorageNetworksStorageNetworkIdVolumesPostRequest{
		ApiService: a,
		ctx:        ctx,
		storageId:  storageId,
	}
}

// Execute executes the request
//  @return Volume
func (a *StorageNetworksApiService) StorageNetworksStorageNetworkIdVolumesPostExecute(r ApiStorageNetworksStorageNetworkIdVolumesPostRequest) (*Volume, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Volume
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageNetworksApiService.StorageNetworksStorageNetworkIdVolumesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-networks/{storageId}/volumes"
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", url.PathEscape(parameterToString(r.storageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeCreate == nil {
		return localVarReturnValue, nil, reportError("volumeCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageNetworksStorageNetworkIdVolumesVolumeIdDeleteRequest struct {
	ctx        context.Context
	ApiService StorageNetworksApi
	storageId  string
	volumeId   string
}

func (r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.StorageNetworksStorageNetworkIdVolumesVolumeIdDeleteExecute(r)
}

/*
StorageNetworksStorageNetworkIdVolumesVolumeIdDelete Delete a Storage Network's Volume

Delete a Storage Network's Volume

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param storageId ID of the storage.
 @param volumeId ID of volume.
 @return ApiStorageNetworksStorageNetworkIdVolumesVolumeIdDeleteRequest
*/
func (a *StorageNetworksApiService) StorageNetworksStorageNetworkIdVolumesVolumeIdDelete(ctx context.Context, storageId string, volumeId string) ApiStorageNetworksStorageNetworkIdVolumesVolumeIdDeleteRequest {
	return ApiStorageNetworksStorageNetworkIdVolumesVolumeIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		storageId:  storageId,
		volumeId:   volumeId,
	}
}

// Execute executes the request
func (a *StorageNetworksApiService) StorageNetworksStorageNetworkIdVolumesVolumeIdDeleteExecute(r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageNetworksApiService.StorageNetworksStorageNetworkIdVolumesVolumeIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-networks/{storageId}/volumes/{volumeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", url.PathEscape(parameterToString(r.storageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"volumeId"+"}", url.PathEscape(parameterToString(r.volumeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiStorageNetworksStorageNetworkIdVolumesVolumeIdGetRequest struct {
	ctx        context.Context
	ApiService StorageNetworksApi
	storageId  string
	volumeId   string
}

func (r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdGetRequest) Execute() (*Volume, *http.Response, error) {
	return r.ApiService.StorageNetworksStorageNetworkIdVolumesVolumeIdGetExecute(r)
}

/*
StorageNetworksStorageNetworkIdVolumesVolumeIdGet Get a storage network's volume details.

Get a storage network's volume details.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param storageId ID of the storage.
 @param volumeId ID of volume.
 @return ApiStorageNetworksStorageNetworkIdVolumesVolumeIdGetRequest
*/
func (a *StorageNetworksApiService) StorageNetworksStorageNetworkIdVolumesVolumeIdGet(ctx context.Context, storageId string, volumeId string) ApiStorageNetworksStorageNetworkIdVolumesVolumeIdGetRequest {
	return ApiStorageNetworksStorageNetworkIdVolumesVolumeIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		storageId:  storageId,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//  @return Volume
func (a *StorageNetworksApiService) StorageNetworksStorageNetworkIdVolumesVolumeIdGetExecute(r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdGetRequest) (*Volume, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Volume
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageNetworksApiService.StorageNetworksStorageNetworkIdVolumesVolumeIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-networks/{storageId}/volumes/{volumeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", url.PathEscape(parameterToString(r.storageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"volumeId"+"}", url.PathEscape(parameterToString(r.volumeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageNetworksStorageNetworkIdVolumesVolumeIdPatchRequest struct {
	ctx          context.Context
	ApiService   StorageNetworksApi
	storageId    string
	volumeId     string
	volumeUpdate *VolumeUpdate
}

// Storage network volume to be updated.
func (r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdPatchRequest) VolumeUpdate(volumeUpdate VolumeUpdate) ApiStorageNetworksStorageNetworkIdVolumesVolumeIdPatchRequest {
	r.volumeUpdate = &volumeUpdate
	return r
}

func (r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdPatchRequest) Execute() (*Volume, *http.Response, error) {
	return r.ApiService.StorageNetworksStorageNetworkIdVolumesVolumeIdPatchExecute(r)
}

/*
StorageNetworksStorageNetworkIdVolumesVolumeIdPatch Update a storage network's volume details.

Update a storage network's volume details.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param storageId ID of the storage.
 @param volumeId ID of volume.
 @return ApiStorageNetworksStorageNetworkIdVolumesVolumeIdPatchRequest
*/
func (a *StorageNetworksApiService) StorageNetworksStorageNetworkIdVolumesVolumeIdPatch(ctx context.Context, storageId string, volumeId string) ApiStorageNetworksStorageNetworkIdVolumesVolumeIdPatchRequest {
	return ApiStorageNetworksStorageNetworkIdVolumesVolumeIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		storageId:  storageId,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//  @return Volume
func (a *StorageNetworksApiService) StorageNetworksStorageNetworkIdVolumesVolumeIdPatchExecute(r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdPatchRequest) (*Volume, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Volume
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageNetworksApiService.StorageNetworksStorageNetworkIdVolumesVolumeIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-networks/{storageId}/volumes/{volumeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", url.PathEscape(parameterToString(r.storageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"volumeId"+"}", url.PathEscape(parameterToString(r.volumeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeUpdate == nil {
		return localVarReturnValue, nil, reportError("volumeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutRequest struct {
	ctx                  context.Context
	ApiService           StorageNetworksApi
	storageId            string
	volumeId             string
	tagAssignmentRequest *[]TagAssignmentRequest
}

// Tags to assign to the volume.
func (r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutRequest) TagAssignmentRequest(tagAssignmentRequest []TagAssignmentRequest) ApiStorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutRequest {
	r.tagAssignmentRequest = &tagAssignmentRequest
	return r
}

func (r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutRequest) Execute() (*Volume, *http.Response, error) {
	return r.ApiService.StorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutExecute(r)
}

/*
StorageNetworksStorageNetworkIdVolumesVolumeIdTagsPut Overwrites tags assigned for the volume.

Overwrites tags assigned for the volume.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param storageId ID of the storage.
 @param volumeId ID of volume.
 @return ApiStorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutRequest
*/
func (a *StorageNetworksApiService) StorageNetworksStorageNetworkIdVolumesVolumeIdTagsPut(ctx context.Context, storageId string, volumeId string) ApiStorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutRequest {
	return ApiStorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutRequest{
		ApiService: a,
		ctx:        ctx,
		storageId:  storageId,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//  @return Volume
func (a *StorageNetworksApiService) StorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutExecute(r ApiStorageNetworksStorageNetworkIdVolumesVolumeIdTagsPutRequest) (*Volume, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Volume
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageNetworksApiService.StorageNetworksStorageNetworkIdVolumesVolumeIdTagsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-networks/{storageId}/volumes/{volumeId}/tags"
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", url.PathEscape(parameterToString(r.storageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"volumeId"+"}", url.PathEscape(parameterToString(r.volumeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagAssignmentRequest == nil {
		return localVarReturnValue, nil, reportError("tagAssignmentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagAssignmentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
