/*
Network Storage API

Create, list, edit, and delete storage networks with the Network Storage API. Use storage networks to expand storage capacity on a private network. <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/bare-metal-cloud-storage' target='_blank'>here</a> </span> <br> <b>All URLs are relative to (https://api.phoenixnap.com/network-storage/v1/)</b>

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkstorageapi

import (
	"encoding/json"
	"time"
)

// StorageNetwork Storage network.
type StorageNetwork struct {
	// Storage network ID.
	Id *string `json:"id,omitempty"`
	// Storage network friendly name.
	Name *string `json:"name,omitempty"`
	// Storage network description.
	Description *string `json:"description,omitempty"`
	Status      *Status `json:"status,omitempty"`
	// Location of storage network. Currently this field should be set to `PHX` or `ASH`.
	Location *string `json:"location,omitempty"`
	// Id of network the storage belongs to.
	NetworkId *string `json:"networkId,omitempty"`
	// IP of the storage network.
	Ips []string `json:"ips,omitempty"`
	// Date and time when this storage network was created.
	CreatedOn *time.Time `json:"createdOn,omitempty"`
	// Volume for a storage network.
	Volumes []Volume `json:"volumes,omitempty"`
}

// NewStorageNetwork instantiates a new StorageNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNetwork() *StorageNetwork {
	this := StorageNetwork{}
	return &this
}

// NewStorageNetworkWithDefaults instantiates a new StorageNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNetworkWithDefaults() *StorageNetwork {
	this := StorageNetwork{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StorageNetwork) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetwork) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StorageNetwork) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StorageNetwork) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageNetwork) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetwork) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageNetwork) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageNetwork) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StorageNetwork) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetwork) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StorageNetwork) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StorageNetwork) SetDescription(v string) {
	o.Description = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StorageNetwork) GetStatus() Status {
	if o == nil || o.Status == nil {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetwork) GetStatusOk() (*Status, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StorageNetwork) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *StorageNetwork) SetStatus(v Status) {
	o.Status = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *StorageNetwork) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetwork) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *StorageNetwork) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *StorageNetwork) SetLocation(v string) {
	o.Location = &v
}

// GetNetworkId returns the NetworkId field value if set, zero value otherwise.
func (o *StorageNetwork) GetNetworkId() string {
	if o == nil || o.NetworkId == nil {
		var ret string
		return ret
	}
	return *o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetwork) GetNetworkIdOk() (*string, bool) {
	if o == nil || o.NetworkId == nil {
		return nil, false
	}
	return o.NetworkId, true
}

// HasNetworkId returns a boolean if a field has been set.
func (o *StorageNetwork) HasNetworkId() bool {
	if o != nil && o.NetworkId != nil {
		return true
	}

	return false
}

// SetNetworkId gets a reference to the given string and assigns it to the NetworkId field.
func (o *StorageNetwork) SetNetworkId(v string) {
	o.NetworkId = &v
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *StorageNetwork) GetIps() []string {
	if o == nil || o.Ips == nil {
		var ret []string
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetwork) GetIpsOk() ([]string, bool) {
	if o == nil || o.Ips == nil {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *StorageNetwork) HasIps() bool {
	if o != nil && o.Ips != nil {
		return true
	}

	return false
}

// SetIps gets a reference to the given []string and assigns it to the Ips field.
func (o *StorageNetwork) SetIps(v []string) {
	o.Ips = v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *StorageNetwork) GetCreatedOn() time.Time {
	if o == nil || o.CreatedOn == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetwork) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil || o.CreatedOn == nil {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *StorageNetwork) HasCreatedOn() bool {
	if o != nil && o.CreatedOn != nil {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given time.Time and assigns it to the CreatedOn field.
func (o *StorageNetwork) SetCreatedOn(v time.Time) {
	o.CreatedOn = &v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *StorageNetwork) GetVolumes() []Volume {
	if o == nil || o.Volumes == nil {
		var ret []Volume
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetwork) GetVolumesOk() ([]Volume, bool) {
	if o == nil || o.Volumes == nil {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *StorageNetwork) HasVolumes() bool {
	if o != nil && o.Volumes != nil {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []Volume and assigns it to the Volumes field.
func (o *StorageNetwork) SetVolumes(v []Volume) {
	o.Volumes = v
}

func (o StorageNetwork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.NetworkId != nil {
		toSerialize["networkId"] = o.NetworkId
	}
	if o.Ips != nil {
		toSerialize["ips"] = o.Ips
	}
	if o.CreatedOn != nil {
		toSerialize["createdOn"] = o.CreatedOn
	}
	if o.Volumes != nil {
		toSerialize["volumes"] = o.Volumes
	}
	return json.Marshal(toSerialize)
}

type NullableStorageNetwork struct {
	value *StorageNetwork
	isSet bool
}

func (v NullableStorageNetwork) Get() *StorageNetwork {
	return v.value
}

func (v *NullableStorageNetwork) Set(val *StorageNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNetwork(val *StorageNetwork) *NullableStorageNetwork {
	return &NullableStorageNetwork{value: val, isSet: true}
}

func (v NullableStorageNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
