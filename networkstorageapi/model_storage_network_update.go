/*
Network Storage API

Create, list, edit, and delete storage networks with the Network Storage API. Use storage networks to expand storage capacity on a private network. <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/bare-metal-cloud-storage' target='_blank'>here</a> </span> <br> <b>All URLs are relative to (https://api.phoenixnap.com/network-storage/v1/)</b>

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkstorageapi

import (
	"encoding/json"
)

// StorageNetworkUpdate Update storage network.
type StorageNetworkUpdate struct {
	// Storage network friendly name.
	Name *string `json:"name,omitempty"`
	// Storage network description.
	Description *string `json:"description,omitempty"`
}

// NewStorageNetworkUpdate instantiates a new StorageNetworkUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNetworkUpdate() *StorageNetworkUpdate {
	this := StorageNetworkUpdate{}
	return &this
}

// NewStorageNetworkUpdateWithDefaults instantiates a new StorageNetworkUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNetworkUpdateWithDefaults() *StorageNetworkUpdate {
	this := StorageNetworkUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageNetworkUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetworkUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageNetworkUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageNetworkUpdate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StorageNetworkUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetworkUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StorageNetworkUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StorageNetworkUpdate) SetDescription(v string) {
	o.Description = &v
}

func (o StorageNetworkUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableStorageNetworkUpdate struct {
	value *StorageNetworkUpdate
	isSet bool
}

func (v NullableStorageNetworkUpdate) Get() *StorageNetworkUpdate {
	return v.value
}

func (v *NullableStorageNetworkUpdate) Set(val *StorageNetworkUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNetworkUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNetworkUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNetworkUpdate(val *StorageNetworkUpdate) *NullableStorageNetworkUpdate {
	return &NullableStorageNetworkUpdate{value: val, isSet: true}
}

func (v NullableStorageNetworkUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNetworkUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
