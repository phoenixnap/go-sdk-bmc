/*
Network Storage API

Create, list, edit, and delete storage networks with the Network Storage API. Use storage networks to expand storage capacity on a private network. <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/bare-metal-cloud-storage' target='_blank'>here</a> </span> <br> <b>All URLs are relative to (https://api.phoenixnap.com/network-storage/v1/)</b>

API version: 1.0
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkstorageapi

import (
	"encoding/json"
)

// VolumeUpdate Update storage network volume.
type VolumeUpdate struct {
	// Capacity of Volume in GB. Currently only whole numbers and multiples of 1000GB are supported.
	CapacityInGb *int32 `json:"capacityInGb,omitempty"`
}

// NewVolumeUpdate instantiates a new VolumeUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeUpdate() *VolumeUpdate {
	this := VolumeUpdate{}
	return &this
}

// NewVolumeUpdateWithDefaults instantiates a new VolumeUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeUpdateWithDefaults() *VolumeUpdate {
	this := VolumeUpdate{}
	return &this
}

// GetCapacityInGb returns the CapacityInGb field value if set, zero value otherwise.
func (o *VolumeUpdate) GetCapacityInGb() int32 {
	if o == nil || o.CapacityInGb == nil {
		var ret int32
		return ret
	}
	return *o.CapacityInGb
}

// GetCapacityInGbOk returns a tuple with the CapacityInGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeUpdate) GetCapacityInGbOk() (*int32, bool) {
	if o == nil || o.CapacityInGb == nil {
		return nil, false
	}
	return o.CapacityInGb, true
}

// HasCapacityInGb returns a boolean if a field has been set.
func (o *VolumeUpdate) HasCapacityInGb() bool {
	if o != nil && o.CapacityInGb != nil {
		return true
	}

	return false
}

// SetCapacityInGb gets a reference to the given int32 and assigns it to the CapacityInGb field.
func (o *VolumeUpdate) SetCapacityInGb(v int32) {
	o.CapacityInGb = &v
}

func (o VolumeUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CapacityInGb != nil {
		toSerialize["capacityInGb"] = o.CapacityInGb
	}
	return json.Marshal(toSerialize)
}

type NullableVolumeUpdate struct {
	value *VolumeUpdate
	isSet bool
}

func (v NullableVolumeUpdate) Get() *VolumeUpdate {
	return v.value
}

func (v *NullableVolumeUpdate) Set(val *VolumeUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeUpdate(val *VolumeUpdate) *NullableVolumeUpdate {
	return &NullableVolumeUpdate{value: val, isSet: true}
}

func (v NullableVolumeUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
