/*
Payments API

Payments API are currently designed to fetch Transactions only.

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentsapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Transaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transaction{}

// Transaction Transaction response model.
type Transaction struct {
	// The Transaction ID.
	Id string `json:"id"`
	// The Transaction status. Status may be: SUCCESS, PROCESSING, FAILED
	Status string `json:"status"`
	// Details about the transaction. Contains failure reason in case of failed transactions.
	Details *string `json:"details,omitempty"`
	// The transaction amount.
	Amount float32 `json:"amount"`
	// The transaction currency.
	Currency string `json:"currency"`
	// Date and time when transaction was created.
	Date                     time.Time                `json:"date"`
	Metadata                 TransactionMetadata      `json:"metadata"`
	CardPaymentMethodDetails CardPaymentMethodDetails `json:"cardPaymentMethodDetails"`
	AdditionalProperties     map[string]interface{}
}

type _Transaction Transaction

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(id string, status string, amount float32, currency string, date time.Time, metadata TransactionMetadata, cardPaymentMethodDetails CardPaymentMethodDetails) *Transaction {
	this := Transaction{}
	this.Id = id
	this.Status = status
	this.Amount = amount
	this.Currency = currency
	this.Date = date
	this.Metadata = metadata
	this.CardPaymentMethodDetails = cardPaymentMethodDetails
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetId returns the Id field value
func (o *Transaction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Transaction) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *Transaction) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Transaction) SetStatus(v string) {
	o.Status = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Transaction) GetDetails() string {
	if o == nil || IsNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Transaction) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *Transaction) SetDetails(v string) {
	o.Details = &v
}

// GetAmount returns the Amount field value
func (o *Transaction) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Transaction) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *Transaction) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Transaction) SetCurrency(v string) {
	o.Currency = v
}

// GetDate returns the Date field value
func (o *Transaction) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Transaction) SetDate(v time.Time) {
	o.Date = v
}

// GetMetadata returns the Metadata field value
func (o *Transaction) GetMetadata() TransactionMetadata {
	if o == nil {
		var ret TransactionMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetMetadataOk() (*TransactionMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Transaction) SetMetadata(v TransactionMetadata) {
	o.Metadata = v
}

// GetCardPaymentMethodDetails returns the CardPaymentMethodDetails field value
func (o *Transaction) GetCardPaymentMethodDetails() CardPaymentMethodDetails {
	if o == nil {
		var ret CardPaymentMethodDetails
		return ret
	}

	return o.CardPaymentMethodDetails
}

// GetCardPaymentMethodDetailsOk returns a tuple with the CardPaymentMethodDetails field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetCardPaymentMethodDetailsOk() (*CardPaymentMethodDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CardPaymentMethodDetails, true
}

// SetCardPaymentMethodDetails sets field value
func (o *Transaction) SetCardPaymentMethodDetails(v CardPaymentMethodDetails) {
	o.CardPaymentMethodDetails = v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	toSerialize["date"] = o.Date
	toSerialize["metadata"] = o.Metadata
	toSerialize["cardPaymentMethodDetails"] = o.CardPaymentMethodDetails

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Transaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"status",
		"amount",
		"currency",
		"date",
		"metadata",
		"cardPaymentMethodDetails",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransaction := _Transaction{}

	err = json.Unmarshal(data, &varTransaction)

	if err != nil {
		return err
	}

	*o = Transaction(varTransaction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "details")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "date")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "cardPaymentMethodDetails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
