/*
Payments API

Payments API are currently designed to fetch Transactions only.

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentsapi

import (
	"encoding/json"
	"fmt"
)

// checks if the TransactionMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionMetadata{}

// TransactionMetadata Transaction's metadata.
type TransactionMetadata struct {
	// The Invoice ID that this transaction pertains to.
	InvoiceId string `json:"invoiceId"`
	// A user-friendly reference number assigned to the invoice that this transaction pertains to.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	// Whether this transaction was triggered by an auto charge or not.
	IsAutoCharge         bool `json:"isAutoCharge"`
	AdditionalProperties map[string]interface{}
}

type _TransactionMetadata TransactionMetadata

// NewTransactionMetadata instantiates a new TransactionMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionMetadata(invoiceId string, isAutoCharge bool) *TransactionMetadata {
	this := TransactionMetadata{}
	this.InvoiceId = invoiceId
	this.IsAutoCharge = isAutoCharge
	return &this
}

// NewTransactionMetadataWithDefaults instantiates a new TransactionMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionMetadataWithDefaults() *TransactionMetadata {
	this := TransactionMetadata{}
	return &this
}

// GetInvoiceId returns the InvoiceId field value
func (o *TransactionMetadata) GetInvoiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvoiceId
}

// GetInvoiceIdOk returns a tuple with the InvoiceId field value
// and a boolean to check if the value has been set.
func (o *TransactionMetadata) GetInvoiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoiceId, true
}

// SetInvoiceId sets field value
func (o *TransactionMetadata) SetInvoiceId(v string) {
	o.InvoiceId = v
}

// GetInvoiceNumber returns the InvoiceNumber field value if set, zero value otherwise.
func (o *TransactionMetadata) GetInvoiceNumber() string {
	if o == nil || IsNil(o.InvoiceNumber) {
		var ret string
		return ret
	}
	return *o.InvoiceNumber
}

// GetInvoiceNumberOk returns a tuple with the InvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMetadata) GetInvoiceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceNumber) {
		return nil, false
	}
	return o.InvoiceNumber, true
}

// HasInvoiceNumber returns a boolean if a field has been set.
func (o *TransactionMetadata) HasInvoiceNumber() bool {
	if o != nil && !IsNil(o.InvoiceNumber) {
		return true
	}

	return false
}

// SetInvoiceNumber gets a reference to the given string and assigns it to the InvoiceNumber field.
func (o *TransactionMetadata) SetInvoiceNumber(v string) {
	o.InvoiceNumber = &v
}

// GetIsAutoCharge returns the IsAutoCharge field value
func (o *TransactionMetadata) GetIsAutoCharge() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAutoCharge
}

// GetIsAutoChargeOk returns a tuple with the IsAutoCharge field value
// and a boolean to check if the value has been set.
func (o *TransactionMetadata) GetIsAutoChargeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAutoCharge, true
}

// SetIsAutoCharge sets field value
func (o *TransactionMetadata) SetIsAutoCharge(v bool) {
	o.IsAutoCharge = v
}

func (o TransactionMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["invoiceId"] = o.InvoiceId
	if !IsNil(o.InvoiceNumber) {
		toSerialize["invoiceNumber"] = o.InvoiceNumber
	}
	toSerialize["isAutoCharge"] = o.IsAutoCharge

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TransactionMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"invoiceId",
		"isAutoCharge",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionMetadata := _TransactionMetadata{}

	err = json.Unmarshal(data, &varTransactionMetadata)

	if err != nil {
		return err
	}

	*o = TransactionMetadata(varTransactionMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "invoiceId")
		delete(additionalProperties, "invoiceNumber")
		delete(additionalProperties, "isAutoCharge")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransactionMetadata struct {
	value *TransactionMetadata
	isSet bool
}

func (v NullableTransactionMetadata) Get() *TransactionMetadata {
	return v.value
}

func (v *NullableTransactionMetadata) Set(val *TransactionMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionMetadata(val *TransactionMetadata) *NullableTransactionMetadata {
	return &NullableTransactionMetadata{value: val, isSet: true}
}

func (v NullableTransactionMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
