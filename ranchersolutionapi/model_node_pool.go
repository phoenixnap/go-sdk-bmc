/*
Rancher Solution API

Simplify enterprise-grade Kubernetes cluster operations and management with Rancher on Bare Metal Cloud. Deploy Kubernetes clusters using a few API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/rancher-bmc-integration-kubernetes' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/solutions/rancher/v1beta)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ranchersolutionapi

import (
	"encoding/json"
)

// checks if the NodePool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodePool{}

// NodePool Node Pool Configuration. A node pool contains the name and configuration for a cluster's node pool. Node pools are set of nodes with a common configuration and specification.
type NodePool struct {
	// The name of the node pool.
	Name *string `json:"name,omitempty"`
	// Number of configured nodes, currently only node counts of 1 and 3 are possible.
	NodeCount *int32 `json:"nodeCount,omitempty"`
	// Node server type. Cannot be changed once a server is created. Currently this field should be set to either `s0.d1.small`, `s0.d1.medium`, `s1.c1.small`, `s1.c1.medium`, `s1.c2.medium`, `s1.c2.large`, `s2.c1.small`, `s2.c1.medium`, `s2.c1.large`, `s2.c2.small`, `s2.c2.medium`, `s2.c2.large`, `s1.e1.small`, `s1.e1.medium`, `s1.e1.large`.
	ServerType *string    `json:"serverType,omitempty"`
	SshConfig  *SshConfig `json:"sshConfig,omitempty"`
	// (Read-only) The nodes associated with this node pool.
	Nodes                []Node `json:"nodes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NodePool NodePool

// NewNodePool instantiates a new NodePool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodePool() *NodePool {
	this := NodePool{}
	var serverType string = "s0.d1.small"
	this.ServerType = &serverType
	return &this
}

// NewNodePoolWithDefaults instantiates a new NodePool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodePoolWithDefaults() *NodePool {
	this := NodePool{}
	var serverType string = "s0.d1.small"
	this.ServerType = &serverType
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NodePool) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePool) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NodePool) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NodePool) SetName(v string) {
	o.Name = &v
}

// GetNodeCount returns the NodeCount field value if set, zero value otherwise.
func (o *NodePool) GetNodeCount() int32 {
	if o == nil || IsNil(o.NodeCount) {
		var ret int32
		return ret
	}
	return *o.NodeCount
}

// GetNodeCountOk returns a tuple with the NodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePool) GetNodeCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NodeCount) {
		return nil, false
	}
	return o.NodeCount, true
}

// HasNodeCount returns a boolean if a field has been set.
func (o *NodePool) HasNodeCount() bool {
	if o != nil && !IsNil(o.NodeCount) {
		return true
	}

	return false
}

// SetNodeCount gets a reference to the given int32 and assigns it to the NodeCount field.
func (o *NodePool) SetNodeCount(v int32) {
	o.NodeCount = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *NodePool) GetServerType() string {
	if o == nil || IsNil(o.ServerType) {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePool) GetServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerType) {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *NodePool) HasServerType() bool {
	if o != nil && !IsNil(o.ServerType) {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *NodePool) SetServerType(v string) {
	o.ServerType = &v
}

// GetSshConfig returns the SshConfig field value if set, zero value otherwise.
func (o *NodePool) GetSshConfig() SshConfig {
	if o == nil || IsNil(o.SshConfig) {
		var ret SshConfig
		return ret
	}
	return *o.SshConfig
}

// GetSshConfigOk returns a tuple with the SshConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePool) GetSshConfigOk() (*SshConfig, bool) {
	if o == nil || IsNil(o.SshConfig) {
		return nil, false
	}
	return o.SshConfig, true
}

// HasSshConfig returns a boolean if a field has been set.
func (o *NodePool) HasSshConfig() bool {
	if o != nil && !IsNil(o.SshConfig) {
		return true
	}

	return false
}

// SetSshConfig gets a reference to the given SshConfig and assigns it to the SshConfig field.
func (o *NodePool) SetSshConfig(v SshConfig) {
	o.SshConfig = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *NodePool) GetNodes() []Node {
	if o == nil || IsNil(o.Nodes) {
		var ret []Node
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePool) GetNodesOk() ([]Node, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *NodePool) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []Node and assigns it to the Nodes field.
func (o *NodePool) SetNodes(v []Node) {
	o.Nodes = v
}

func (o NodePool) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodePool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NodeCount) {
		toSerialize["nodeCount"] = o.NodeCount
	}
	if !IsNil(o.ServerType) {
		toSerialize["serverType"] = o.ServerType
	}
	if !IsNil(o.SshConfig) {
		toSerialize["sshConfig"] = o.SshConfig
	}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NodePool) UnmarshalJSON(data []byte) (err error) {
	varNodePool := _NodePool{}

	err = json.Unmarshal(data, &varNodePool)

	if err != nil {
		return err
	}

	*o = NodePool(varNodePool)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "nodeCount")
		delete(additionalProperties, "serverType")
		delete(additionalProperties, "sshConfig")
		delete(additionalProperties, "nodes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNodePool struct {
	value *NodePool
	isSet bool
}

func (v NullableNodePool) Get() *NodePool {
	return v.value
}

func (v *NullableNodePool) Set(val *NodePool) {
	v.value = val
	v.isSet = true
}

func (v NullableNodePool) IsSet() bool {
	return v.isSet
}

func (v *NullableNodePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodePool(val *NodePool) *NullableNodePool {
	return &NullableNodePool{value: val, isSet: true}
}

func (v NullableNodePool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
