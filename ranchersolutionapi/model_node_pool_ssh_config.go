/*
Rancher Solution API

Simplify enterprise-grade Kubernetes cluster operations and management with Rancher on Bare Metal Cloud. Deploy Kubernetes clusters using a few API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/rancher-bmc-integration-kubernetes' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/solutions/rancher/v1beta)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ranchersolutionapi

import (
	"encoding/json"
)

// NodePoolSshConfig struct for NodePoolSshConfig
type NodePoolSshConfig struct {
	// Define whether public keys marked as default should be installed on this node. These are public keys that were already recorded on this system. Use <a href='https://developers.phoenixnap.com/docs/bmc/1/routes/ssh-keys/get' target='_blank'>GET /ssh-keys</a> to retrieve a list of possible values.
	InstallDefaultKeys *bool `json:"installDefaultKeys,omitempty"`
	// List of public SSH keys.
	Keys []string `json:"keys,omitempty"`
	// List of public SSH key identifiers. These are public keys that were already recorded on this system. Use <a href='https://developers.phoenixnap.com/docs/bmc/1/routes/ssh-keys/get' target='_blank'>GET /ssh-keys</a> to retrieve a list of possible values.
	KeyIds []string `json:"keyIds,omitempty"`
}

// NewNodePoolSshConfig instantiates a new NodePoolSshConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodePoolSshConfig() *NodePoolSshConfig {
	this := NodePoolSshConfig{}
	var installDefaultKeys bool = true
	this.InstallDefaultKeys = &installDefaultKeys
	return &this
}

// NewNodePoolSshConfigWithDefaults instantiates a new NodePoolSshConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodePoolSshConfigWithDefaults() *NodePoolSshConfig {
	this := NodePoolSshConfig{}
	var installDefaultKeys bool = true
	this.InstallDefaultKeys = &installDefaultKeys
	return &this
}

// GetInstallDefaultKeys returns the InstallDefaultKeys field value if set, zero value otherwise.
func (o *NodePoolSshConfig) GetInstallDefaultKeys() bool {
	if o == nil || o.InstallDefaultKeys == nil {
		var ret bool
		return ret
	}
	return *o.InstallDefaultKeys
}

// GetInstallDefaultKeysOk returns a tuple with the InstallDefaultKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolSshConfig) GetInstallDefaultKeysOk() (*bool, bool) {
	if o == nil || o.InstallDefaultKeys == nil {
		return nil, false
	}
	return o.InstallDefaultKeys, true
}

// HasInstallDefaultKeys returns a boolean if a field has been set.
func (o *NodePoolSshConfig) HasInstallDefaultKeys() bool {
	if o != nil && o.InstallDefaultKeys != nil {
		return true
	}

	return false
}

// SetInstallDefaultKeys gets a reference to the given bool and assigns it to the InstallDefaultKeys field.
func (o *NodePoolSshConfig) SetInstallDefaultKeys(v bool) {
	o.InstallDefaultKeys = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *NodePoolSshConfig) GetKeys() []string {
	if o == nil || o.Keys == nil {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolSshConfig) GetKeysOk() ([]string, bool) {
	if o == nil || o.Keys == nil {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *NodePoolSshConfig) HasKeys() bool {
	if o != nil && o.Keys != nil {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *NodePoolSshConfig) SetKeys(v []string) {
	o.Keys = v
}

// GetKeyIds returns the KeyIds field value if set, zero value otherwise.
func (o *NodePoolSshConfig) GetKeyIds() []string {
	if o == nil || o.KeyIds == nil {
		var ret []string
		return ret
	}
	return o.KeyIds
}

// GetKeyIdsOk returns a tuple with the KeyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolSshConfig) GetKeyIdsOk() ([]string, bool) {
	if o == nil || o.KeyIds == nil {
		return nil, false
	}
	return o.KeyIds, true
}

// HasKeyIds returns a boolean if a field has been set.
func (o *NodePoolSshConfig) HasKeyIds() bool {
	if o != nil && o.KeyIds != nil {
		return true
	}

	return false
}

// SetKeyIds gets a reference to the given []string and assigns it to the KeyIds field.
func (o *NodePoolSshConfig) SetKeyIds(v []string) {
	o.KeyIds = v
}

func (o NodePoolSshConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InstallDefaultKeys != nil {
		toSerialize["installDefaultKeys"] = o.InstallDefaultKeys
	}
	if o.Keys != nil {
		toSerialize["keys"] = o.Keys
	}
	if o.KeyIds != nil {
		toSerialize["keyIds"] = o.KeyIds
	}
	return json.Marshal(toSerialize)
}

type NullableNodePoolSshConfig struct {
	value *NodePoolSshConfig
	isSet bool
}

func (v NullableNodePoolSshConfig) Get() *NodePoolSshConfig {
	return v.value
}

func (v *NullableNodePoolSshConfig) Set(val *NodePoolSshConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNodePoolSshConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNodePoolSshConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodePoolSshConfig(val *NodePoolSshConfig) *NullableNodePoolSshConfig {
	return &NullableNodePoolSshConfig{value: val, isSet: true}
}

func (v NullableNodePoolSshConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodePoolSshConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
