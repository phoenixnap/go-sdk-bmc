/*
Rancher Solution API

Simplify enterprise-grade Kubernetes cluster operations and management with Rancher on Bare Metal Cloud. Deploy Kubernetes clusters using a few API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/rancher-bmc-integration-kubernetes' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/solutions/rancher/v1beta)</b> 

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ranchersolutionapi

import (
	"encoding/json"
)

// RancherClusterConfig (Write-only) Rancher configuration parameters.
type RancherClusterConfig struct {
	// Shared secret used to join a server or agent to a cluster.
	Token *string `json:"token,omitempty"`
	// This maps to ranchers `tls-san`. Add additional hostname or IP as a Subject Alternative Name in the TLS cert.
	TlsSan *string `json:"tlsSan,omitempty"`
	// This maps to ranchers `etcd-snapshot-schedule-cron`. Snapshot interval time in cron spec. eg. every 5 hours ‘0 *_/5 * * *’. Default: at 12 am/pm
	EtcdSnapshotScheduleCron *string `json:"etcdSnapshotScheduleCron,omitempty"`
	// This maps to ranchers `etcd-snapshot-retention`. Number of snapshots to retain.
	EtcdSnapshotRetention *int32 `json:"etcdSnapshotRetention,omitempty"`
	// This maps to ranchers `node-taint`. Registering kubelet with set of taints. By default, server nodes will be schedulable and thus your workloads can get launched on them. If you wish to have a dedicated control plane where no user workloads will run, you can use taints.
	NodeTaint *string `json:"nodeTaint,omitempty"`
	// This maps to ranchers `cluster-domain`. Cluster Domain.
	ClusterDomain *string `json:"clusterDomain,omitempty"`
	Certificates *RancherClusterCertificates `json:"certificates,omitempty"`
}

// NewRancherClusterConfig instantiates a new RancherClusterConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRancherClusterConfig() *RancherClusterConfig {
	this := RancherClusterConfig{}
	var etcdSnapshotScheduleCron string = "0 0,12 * * *"
	this.EtcdSnapshotScheduleCron = &etcdSnapshotScheduleCron
	var etcdSnapshotRetention int32 = 5
	this.EtcdSnapshotRetention = &etcdSnapshotRetention
	return &this
}

// NewRancherClusterConfigWithDefaults instantiates a new RancherClusterConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRancherClusterConfigWithDefaults() *RancherClusterConfig {
	this := RancherClusterConfig{}
	var etcdSnapshotScheduleCron string = "0 0,12 * * *"
	this.EtcdSnapshotScheduleCron = &etcdSnapshotScheduleCron
	var etcdSnapshotRetention int32 = 5
	this.EtcdSnapshotRetention = &etcdSnapshotRetention
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *RancherClusterConfig) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RancherClusterConfig) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *RancherClusterConfig) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *RancherClusterConfig) SetToken(v string) {
	o.Token = &v
}

// GetTlsSan returns the TlsSan field value if set, zero value otherwise.
func (o *RancherClusterConfig) GetTlsSan() string {
	if o == nil || o.TlsSan == nil {
		var ret string
		return ret
	}
	return *o.TlsSan
}

// GetTlsSanOk returns a tuple with the TlsSan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RancherClusterConfig) GetTlsSanOk() (*string, bool) {
	if o == nil || o.TlsSan == nil {
		return nil, false
	}
	return o.TlsSan, true
}

// HasTlsSan returns a boolean if a field has been set.
func (o *RancherClusterConfig) HasTlsSan() bool {
	if o != nil && o.TlsSan != nil {
		return true
	}

	return false
}

// SetTlsSan gets a reference to the given string and assigns it to the TlsSan field.
func (o *RancherClusterConfig) SetTlsSan(v string) {
	o.TlsSan = &v
}

// GetEtcdSnapshotScheduleCron returns the EtcdSnapshotScheduleCron field value if set, zero value otherwise.
func (o *RancherClusterConfig) GetEtcdSnapshotScheduleCron() string {
	if o == nil || o.EtcdSnapshotScheduleCron == nil {
		var ret string
		return ret
	}
	return *o.EtcdSnapshotScheduleCron
}

// GetEtcdSnapshotScheduleCronOk returns a tuple with the EtcdSnapshotScheduleCron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RancherClusterConfig) GetEtcdSnapshotScheduleCronOk() (*string, bool) {
	if o == nil || o.EtcdSnapshotScheduleCron == nil {
		return nil, false
	}
	return o.EtcdSnapshotScheduleCron, true
}

// HasEtcdSnapshotScheduleCron returns a boolean if a field has been set.
func (o *RancherClusterConfig) HasEtcdSnapshotScheduleCron() bool {
	if o != nil && o.EtcdSnapshotScheduleCron != nil {
		return true
	}

	return false
}

// SetEtcdSnapshotScheduleCron gets a reference to the given string and assigns it to the EtcdSnapshotScheduleCron field.
func (o *RancherClusterConfig) SetEtcdSnapshotScheduleCron(v string) {
	o.EtcdSnapshotScheduleCron = &v
}

// GetEtcdSnapshotRetention returns the EtcdSnapshotRetention field value if set, zero value otherwise.
func (o *RancherClusterConfig) GetEtcdSnapshotRetention() int32 {
	if o == nil || o.EtcdSnapshotRetention == nil {
		var ret int32
		return ret
	}
	return *o.EtcdSnapshotRetention
}

// GetEtcdSnapshotRetentionOk returns a tuple with the EtcdSnapshotRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RancherClusterConfig) GetEtcdSnapshotRetentionOk() (*int32, bool) {
	if o == nil || o.EtcdSnapshotRetention == nil {
		return nil, false
	}
	return o.EtcdSnapshotRetention, true
}

// HasEtcdSnapshotRetention returns a boolean if a field has been set.
func (o *RancherClusterConfig) HasEtcdSnapshotRetention() bool {
	if o != nil && o.EtcdSnapshotRetention != nil {
		return true
	}

	return false
}

// SetEtcdSnapshotRetention gets a reference to the given int32 and assigns it to the EtcdSnapshotRetention field.
func (o *RancherClusterConfig) SetEtcdSnapshotRetention(v int32) {
	o.EtcdSnapshotRetention = &v
}

// GetNodeTaint returns the NodeTaint field value if set, zero value otherwise.
func (o *RancherClusterConfig) GetNodeTaint() string {
	if o == nil || o.NodeTaint == nil {
		var ret string
		return ret
	}
	return *o.NodeTaint
}

// GetNodeTaintOk returns a tuple with the NodeTaint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RancherClusterConfig) GetNodeTaintOk() (*string, bool) {
	if o == nil || o.NodeTaint == nil {
		return nil, false
	}
	return o.NodeTaint, true
}

// HasNodeTaint returns a boolean if a field has been set.
func (o *RancherClusterConfig) HasNodeTaint() bool {
	if o != nil && o.NodeTaint != nil {
		return true
	}

	return false
}

// SetNodeTaint gets a reference to the given string and assigns it to the NodeTaint field.
func (o *RancherClusterConfig) SetNodeTaint(v string) {
	o.NodeTaint = &v
}

// GetClusterDomain returns the ClusterDomain field value if set, zero value otherwise.
func (o *RancherClusterConfig) GetClusterDomain() string {
	if o == nil || o.ClusterDomain == nil {
		var ret string
		return ret
	}
	return *o.ClusterDomain
}

// GetClusterDomainOk returns a tuple with the ClusterDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RancherClusterConfig) GetClusterDomainOk() (*string, bool) {
	if o == nil || o.ClusterDomain == nil {
		return nil, false
	}
	return o.ClusterDomain, true
}

// HasClusterDomain returns a boolean if a field has been set.
func (o *RancherClusterConfig) HasClusterDomain() bool {
	if o != nil && o.ClusterDomain != nil {
		return true
	}

	return false
}

// SetClusterDomain gets a reference to the given string and assigns it to the ClusterDomain field.
func (o *RancherClusterConfig) SetClusterDomain(v string) {
	o.ClusterDomain = &v
}

// GetCertificates returns the Certificates field value if set, zero value otherwise.
func (o *RancherClusterConfig) GetCertificates() RancherClusterCertificates {
	if o == nil || o.Certificates == nil {
		var ret RancherClusterCertificates
		return ret
	}
	return *o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RancherClusterConfig) GetCertificatesOk() (*RancherClusterCertificates, bool) {
	if o == nil || o.Certificates == nil {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *RancherClusterConfig) HasCertificates() bool {
	if o != nil && o.Certificates != nil {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given RancherClusterCertificates and assigns it to the Certificates field.
func (o *RancherClusterConfig) SetCertificates(v RancherClusterCertificates) {
	o.Certificates = &v
}

func (o RancherClusterConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.TlsSan != nil {
		toSerialize["tlsSan"] = o.TlsSan
	}
	if o.EtcdSnapshotScheduleCron != nil {
		toSerialize["etcdSnapshotScheduleCron"] = o.EtcdSnapshotScheduleCron
	}
	if o.EtcdSnapshotRetention != nil {
		toSerialize["etcdSnapshotRetention"] = o.EtcdSnapshotRetention
	}
	if o.NodeTaint != nil {
		toSerialize["nodeTaint"] = o.NodeTaint
	}
	if o.ClusterDomain != nil {
		toSerialize["clusterDomain"] = o.ClusterDomain
	}
	if o.Certificates != nil {
		toSerialize["certificates"] = o.Certificates
	}
	return json.Marshal(toSerialize)
}

type NullableRancherClusterConfig struct {
	value *RancherClusterConfig
	isSet bool
}

func (v NullableRancherClusterConfig) Get() *RancherClusterConfig {
	return v.value
}

func (v *NullableRancherClusterConfig) Set(val *RancherClusterConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRancherClusterConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRancherClusterConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRancherClusterConfig(val *RancherClusterConfig) *NullableRancherClusterConfig {
	return &NullableRancherClusterConfig{value: val, isSet: true}
}

func (v NullableRancherClusterConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRancherClusterConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


