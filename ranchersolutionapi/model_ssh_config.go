/*
Rancher Solution API

Simplify enterprise-grade Kubernetes cluster operations and management with Rancher on Bare Metal Cloud. Deploy Kubernetes clusters using a few API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/rancher-bmc-integration-kubernetes' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/solutions/rancher/v1beta)</b>

API version: 0.1
Contact: support@phoenixnap.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ranchersolutionapi

import (
	"encoding/json"
)

// checks if the SshConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SshConfig{}

// SshConfig (Write-only) Configuration defining which public SSH keys are pre-installed as authorized on the server.
type SshConfig struct {
	// Define whether public keys marked as default should be installed on this node. These are public keys that were already recorded on this system. Use <a href='https://developers.phoenixnap.com/docs/bmc/1/routes/ssh-keys/get' target='_blank'>GET /ssh-keys</a> to retrieve a list of possible values.
	InstallDefaultKeys *bool `json:"installDefaultKeys,omitempty"`
	// List of public SSH keys.
	Keys []string `json:"keys,omitempty"`
	// List of public SSH key identifiers. These are public keys that were already recorded on this system. Use <a href='https://developers.phoenixnap.com/docs/bmc/1/routes/ssh-keys/get' target='_blank'>GET /ssh-keys</a> to retrieve a list of possible values.
	KeyIds               []string `json:"keyIds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SshConfig SshConfig

// NewSshConfig instantiates a new SshConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshConfig() *SshConfig {
	this := SshConfig{}
	var installDefaultKeys bool = true
	this.InstallDefaultKeys = &installDefaultKeys
	return &this
}

// NewSshConfigWithDefaults instantiates a new SshConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshConfigWithDefaults() *SshConfig {
	this := SshConfig{}
	var installDefaultKeys bool = true
	this.InstallDefaultKeys = &installDefaultKeys
	return &this
}

// GetInstallDefaultKeys returns the InstallDefaultKeys field value if set, zero value otherwise.
func (o *SshConfig) GetInstallDefaultKeys() bool {
	if o == nil || IsNil(o.InstallDefaultKeys) {
		var ret bool
		return ret
	}
	return *o.InstallDefaultKeys
}

// GetInstallDefaultKeysOk returns a tuple with the InstallDefaultKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshConfig) GetInstallDefaultKeysOk() (*bool, bool) {
	if o == nil || IsNil(o.InstallDefaultKeys) {
		return nil, false
	}
	return o.InstallDefaultKeys, true
}

// HasInstallDefaultKeys returns a boolean if a field has been set.
func (o *SshConfig) HasInstallDefaultKeys() bool {
	if o != nil && !IsNil(o.InstallDefaultKeys) {
		return true
	}

	return false
}

// SetInstallDefaultKeys gets a reference to the given bool and assigns it to the InstallDefaultKeys field.
func (o *SshConfig) SetInstallDefaultKeys(v bool) {
	o.InstallDefaultKeys = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *SshConfig) GetKeys() []string {
	if o == nil || IsNil(o.Keys) {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshConfig) GetKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *SshConfig) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *SshConfig) SetKeys(v []string) {
	o.Keys = v
}

// GetKeyIds returns the KeyIds field value if set, zero value otherwise.
func (o *SshConfig) GetKeyIds() []string {
	if o == nil || IsNil(o.KeyIds) {
		var ret []string
		return ret
	}
	return o.KeyIds
}

// GetKeyIdsOk returns a tuple with the KeyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshConfig) GetKeyIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyIds) {
		return nil, false
	}
	return o.KeyIds, true
}

// HasKeyIds returns a boolean if a field has been set.
func (o *SshConfig) HasKeyIds() bool {
	if o != nil && !IsNil(o.KeyIds) {
		return true
	}

	return false
}

// SetKeyIds gets a reference to the given []string and assigns it to the KeyIds field.
func (o *SshConfig) SetKeyIds(v []string) {
	o.KeyIds = v
}

func (o SshConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SshConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstallDefaultKeys) {
		toSerialize["installDefaultKeys"] = o.InstallDefaultKeys
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.KeyIds) {
		toSerialize["keyIds"] = o.KeyIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SshConfig) UnmarshalJSON(data []byte) (err error) {
	varSshConfig := _SshConfig{}

	err = json.Unmarshal(data, &varSshConfig)

	if err != nil {
		return err
	}

	*o = SshConfig(varSshConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "installDefaultKeys")
		delete(additionalProperties, "keys")
		delete(additionalProperties, "keyIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSshConfig struct {
	value *SshConfig
	isSet bool
}

func (v NullableSshConfig) Get() *SshConfig {
	return v.value
}

func (v *NullableSshConfig) Set(val *SshConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSshConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSshConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshConfig(val *SshConfig) *NullableSshConfig {
	return &NullableSshConfig{value: val, isSet: true}
}

func (v NullableSshConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
