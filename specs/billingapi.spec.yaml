openapi: '3.0.2'
info:
  title: Billing API
  description: |
    Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to
    ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a
    given period and enable or disable auto-renewals.<br>
    <br>
    <span class='pnap-api-knowledge-base-link'>
    Knowledge base articles to help you can be found
    <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a>
    </span><br>
    <br>
    <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b>
  termsOfService: https://phoenixnap.com/infrastructure-solutions/legal-it/privacy-shield-compliant-privacy-policy
  version: "0.1"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: PhoenixNAP Team
    email: support@phoenixnap.com
    url: https://phoenixnap.com/

security:
  - OAuth2:
      - bmc
      - bmc.read

servers:
  - url: 'https://api.phoenixnap.com/billing/v1'

tags:
  - name: "Rated Usage"
    description: "Rated Usage operations"
  - name: "Products"
    description: "Product operations"
  - name: "Reservations"
    description: "Reservation operations"
  - name: "Billing Configurations"
    description: "Account Billing Configuration operations"

paths:
  /rated-usage:
    get:
      tags:
        - "Rated Usage"
      description: "Retrieves all rated usage for given time period. The information is presented as a list of
       rated usage records. Every record corresponds to a charge. All date & times are in UTC."
      summary: "List the rated usage."
      operationId: ratedUsageGet
      security:
        - OAuth2: [bmc.read]
      parameters:
        - in: query
          name: fromYearMonth
          description: "From year month (inclusive) to filter rated usage records by."
          required: true
          schema:
            type: string
          example: "2020-03"
        - in: query
          name: toYearMonth
          description: "To year month (inclusive) to filter rated usage records by."
          required: true
          schema:
            type: string
          example: "2020-04"
        - in: query
          name: productCategory
          required: false
          description: "The product category"
          schema:
            $ref: "#/components/schemas/ProductCategoryEnum"
          example: SERVER
      responses:
        '200':
          description: "List of all the rated usage records for given period of months. If productCategory filter is not used returns all records."
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ServerRecord'
                    - $ref: '#/components/schemas/BandwidthRecord'
                    - $ref: '#/components/schemas/OperatingSystemRecord'
                    - $ref: '#/components/schemas/PublicSubnetRecord'
                    - $ref: '#/components/schemas/StorageRecord'
                  discriminator:
                    propertyName: productCategory
                    mapping:
                      bmc-server: '#/components/schemas/ServerRecord'
                      bandwidth: '#/components/schemas/BandwidthRecord'
                      operating-system: '#/components/schemas/OperatingSystemRecord'
                      public-ip: '#/components/schemas/PublicSubnetRecord'
                      storage: '#/components/schemas/StorageRecord'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /rated-usage/month-to-date:
    get:
      tags:
        - "Rated Usage"
      description: "Retrieves all rated usage for the current calendar month. The information is presented as a list of rated usage records. Every record corresponds to a charge. All date & times are in UTC."
      summary: "List the rated usage records for the current calendar month."
      operationId: ratedUsageMonthToDateGet
      security:
        - OAuth2: [bmc.read]
      parameters:
        - in: query
          name: productCategory
          required: false
          description: "The product category"
          schema:
            $ref: "#/components/schemas/ProductCategoryEnum"
          example: SERVER
      responses:
        '200':
          description: "List of all the rated usage records."
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ServerRecord'
                    - $ref: '#/components/schemas/BandwidthRecord'
                    - $ref: '#/components/schemas/OperatingSystemRecord'
                    - $ref: '#/components/schemas/PublicSubnetRecord'
                    - $ref: '#/components/schemas/StorageRecord'
                  discriminator:
                    propertyName: productCategory
                    mapping:
                      bmc-server: '#/components/schemas/ServerRecord'
                      bandwidth: '#/components/schemas/BandwidthRecord'
                      operating-system: '#/components/schemas/OperatingSystemRecord'
                      public-ip: '#/components/schemas/PublicSubnetRecord'
                      storage: '#/components/schemas/StorageRecord'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products:
    get:
      tags:
        - "Products"
      description: "Retrieves all Products."
      summary: "List all Products."
      security:
        - OAuth2: [bmc.read]
      operationId: productsGet
      parameters:
        - in: query
          name: productCode
          required: false
          schema:
            type: string
          example: "d1.tiny"
        - in: query
          name: productCategory
          required: false
          schema:
            type: string
          example: "server"
        - in: query
          name: skuCode
          required: false
          schema:
            type: string
          example: "xxx-xxx-xxx"
        - in: query
          name: location
          required: false
          schema:
            type: string
          example: "PHX"
      responses:
        '200':
          description: "List of all the products."
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Product'
                    - $ref: '#/components/schemas/ServerProduct'
                  discriminator:
                    propertyName: productCategory
                    mapping:
                      SERVER: '#/components/schemas/ServerProduct'
                      BANDWIDTH: '#/components/schemas/Product'
                      OPERATING_SYSTEM: '#/components/schemas/Product'
                      STORAGE: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reservations:
    get:
      tags:
        - "Reservations"
      description: "Retrieves all reservations associated with the authenticated account. All date & times are in UTC."
      summary: "List all Reservations."
      operationId: reservationsGet
      security:
        - OAuth2: [bmc.read]
      parameters:
        - in: query
          name: productCategory
          required: false
          description: "The product category"
          schema:
            $ref: "#/components/schemas/ProductCategoryEnum"
          example: SERVER
      responses:
        '200':
          description: "List of all reservations is returned if productCategory parameter is not specified."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - "Reservations"
      description: "Creates new package reservation for authenticated account."
      summary: "Create a reservation."
      operationId: reservationsPost
      security:
        - OAuth2: [ bmc ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
      responses:
        '201':
          description: "Returns created reservation instance."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reservations/{reservationId}:
    parameters:
      - in: path
        name: reservationId
        required: true
        schema:
          type: string
        description: "The reservation's ID."
        example: "e6afba51-7de8-4080-83ab-0f915570659c"
    get:
      tags:
        - "Reservations"
      description: "Retrieves the reservations with the specified identifier. All date & times are in UTC."
      summary: "Get a reservation."
      operationId: reservationsReservationIdGet
      security:
        - OAuth2: [bmc.read]
      responses:
        '200':
          description: "The matched reservation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reservations/{reservationId}/actions/auto-renew/disable:
    description: "Disable auto-renewal for reservation by the reservation id."
    parameters:
      - in: path
        name: reservationId
        required: true
        schema:
          type: string
        description: "The reservation's ID."
        example: "e6afba51-7de8-4080-83ab-0f915570659c"
    post:
      tags:
        - "Reservations"
      summary: "Disable auto-renewal for reservation by id."
      description: "Disable auto-renewal for reservation by reservation id."
      operationId: reservationsReservationIdActionsAutoRenewDisablePost
      security:
        - OAuth2: [bmc]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationAutoRenewDisableRequest'
      responses:
        '200':
          description: "Reservation with auto-renewal disabled"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reservations/{reservationId}/actions/auto-renew/enable:
    description: "Enable auto-renewal for reservation by the reservation id."
    parameters:
      - in: path
        name: reservationId
        required: true
        schema:
          type: string
        description: "The reservation's ID."
        example: "e6afba51-7de8-4080-83ab-0f915570659c"
    post:
      tags:
        - "Reservations"
      summary: "Enable auto-renewal for unexpired reservation by reservation id."
      description: "Enable auto-renewal for unexpired reservation by reservation id."
      operationId: reservationsReservationIdActionsAutoRenewEnablePost
      security:
        - OAuth2: [ bmc ]
      responses:
        '200':
          description: "Reservation with auto-renewal enabled."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reservations/{reservationId}/actions/convert:
    description: "Convert reservation pricing model."
    parameters:
      - in: path
        name: reservationId
        required: true
        schema:
          type: string
        description: "The reservation's ID."
        example: "e6afba51-7de8-4080-83ab-0f915570659c"
    post:
      tags:
        - "Reservations"
      description: "Convert reservation pricing model by reservation id."
      summary: "Convert reservation pricing model by reservation ID."
      operationId: reservationsReservationIdActionsConvertPost
      security:
        - OAuth2: [ bmc ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
      responses:
        '200':
          description: "Converted reservation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /account-billing-configurations/me:
    description: "Retrieves billing configuration associated with the authenticated account."
    get:
      tags:
        - "Billing Configurations"
      description: "Retrieves billing configuration associated with the authenticated account."
      summary: "Retrieves billing configuration associated with the authenticated account."
      operationId: accountBillingConfigurationMeGet
      security:
        - OAuth2: [ bmc.read ]
      responses:
        '200':
          description: "Billing configuration details for the account"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /product-availability:
    description: "Retrieves all product availabilities."
    get:
      tags:
        - "Products"
      summary: "List all Product availabilities."
      description: "Retrieves the list of product availability details."
      security:
        - OAuth2: [ bmc.read ]
      operationId: productAvailabilityGet
      parameters:
        - in: query
          name: productCategory
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - SERVER
          description: "Product category. Currently only SERVER category is supported."
          example: ["SERVER"]
        - in: query
          name: productCode
          required: false
          schema:
            type: array
            items:
              type: string
          example: ["d1.c1.small"]
        - in: query
          name: showOnlyMinQuantityAvailable
          required: false
          schema:
            type: boolean
            default: true
          description: "Show only locations where product with requested quantity is available or all locations where product is offered."
          example: true
        - in: query
          name: location
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LocationEnum'
          example: ["PHX"]
        - in: query
          name: solution
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - SERVER_RANCHER
          example: ["SERVER_RANCHER"]
        - in: query
          name: minQuantity
          required: false
          schema:
            type: number
          description: "Minimal quantity of product needed. Minimum, maximum and default values might differ for different products. For servers, they are 1, 10 and 1 respectively."
          example: 2
      responses:
        '200':
          description: "List of all product availabilities."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductAvailability'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://auth.phoenixnap.com/auth/realms/BMC/protocol/openid-connect/token
          scopes:
            bmc: Grants full access to bmc-api.
            bmc.read: Grants read only access to bmc-api.

  schemas:
    RatedUsageRecord:
      type: object
      description: "Rated usage record."
      properties:
        id:
          description: "The unique identifier of the rated usage record."
          type: string
          example: "ec4a9d49-1cef-49e9-b85e-b560f88bcd26"
        productCategory:
          description: "The category of the product associated with this usage record."
          type: string
          enum: [bmc-server, bandwidth, operating-system, public-ip, storage]
          example: "bmc-server"
        productCode:
          description: "The code identifying the product associated to this usage record."
          type: string
          example: "s1.c1.small"
        location:
          $ref: '#/components/schemas/LocationEnum'
        yearMonth:
          description: "Year and month of the usage record."
          type: string
          example: "2020-03"
        startDateTime:
          description: "The point in time (in UTC) when usage has started."
          type: string
          format: date-time
          example: "2020-03-19T16:39:00Z"
        endDateTime:
          description: "The point in time (in UTC) until usage has been rated."
          type: string
          format: date-time
          example: "2020-03-20T17:00:00Z"
        cost:
          description: "The rated usage in cents."
          type: integer
          format: int64
          example: 384
        costDescription:
          description: "The rated usage cost description."
          type: string
          example: "24 Hour(s) @ $0.16 /Hour"
        priceModel:
          description: "The price model applied to this usage record."
          type: "string"
          example: "hourly"
        unitPrice:
          description: "The unit price."
          type: number
          example: 0.16
        unitPriceDescription:
          description: "User friendly description of the unit price."
          type: "string"
          example: "per hour"
        quantity:
          description: "The number of units being charged."
          type: number
          example: 24.0
        active:
          description: "A flag indicating whether the rated usage record is still active."
          type: boolean
          example: true
        usageSessionId:
          description: "The usage session ID is used to correlate rated usage records across periods of time. For
          example, a server used for over a month will generate multiple rated usage records. The entire usage session
          cost can be computed by aggregating the records having the same usage session ID. It is usual to have one
          rated usage record per month or invoice."
          type: string
          example: "ec4a9d49-1cef-49e9-b85e-b560f88bcd26"
        correlationId:
          description: "Holds usage record id"
          type: string
          example: "ec4a9d49-1cef-49e9-b85e-b560f88bcd26"
        reservationId:
          description: "Reservation id associated with this rated usage record."
          type: string
          example: "c32a24a1-5949-4b60-99c0-c8aaa3a92b04"
      required:
        - id
        - productCategory
        - productCode
        - location
        - startDateTime
        - endDateTime
        - cost
        - priceModel
        - unitPrice
        - unitPriceDescription
        - quantity
        - active
        - usageSessionId
        - correlationId

    ServerRecord:
      allOf:
        - $ref: '#/components/schemas/RatedUsageRecord'
        - type: object
          description: "Server usage record."
          properties:
            metadata:
              $ref: '#/components/schemas/ServerDetails'
          required:
            - metadata

    ServerDetails:
      type: object
      description: "Details of the server associated with this rated usage record."
      properties:
        id:
          description: "The server identifier as returned by the BMC API."
          type: string
          example: "83604275-bdba-490a-b87a-978e8dffdb14"
        hostname:
          description: "The server hostname."
          type: string
          example: "example-server"
      required:
        - id
        - hostname

    OperatingSystemRecord:
      allOf:
        - $ref: '#/components/schemas/RatedUsageRecord'
        - type: object
          description: "Operating system usage record."
          properties:
            metadata:
              $ref: '#/components/schemas/OperatingSystemDetails'
          required:
            - metadata

    OperatingSystemDetails:
      type: object
      description: "Details of the operating system associated with this rated usage record."
      properties:
        cores:
          description: "Number of cores."
          type: integer
          format: int32
          example: 2
        correlationId:
          description: "Correlation is used to associate Operating System License charges and the Server on which it was installed.
            In this scenario, the correlation ID will be equal to the rated usage record ID representing the charge for the Server."
          type: string
          example: "ec4a9d49-1cef-49e9-b85e-b560f88bcd26"
      required:
        - cores
        - correlationId

    BandwidthRecord:
      allOf:
        - $ref: '#/components/schemas/RatedUsageRecord'
        - type: object
          description: "Bandwidth usage record."
          properties:
            metadata:
              $ref: '#/components/schemas/BandwidthDetails'
          required:
            - metadata

    BandwidthDetails:
      type: object
      description: "Details of the bandwidth associated with this rated usage record."
      properties:
        ingressGb:
          description: "The amount of GB consumed in ingress (IN)."
          type: number
          example: 1.33
        egressGb:
          description: "The amount of GB consumed in egress (OUT)."
          type: number
          example: 1.33
        packageQuantity:
          description: "Package size per month."
          type: number
          example: 15
        packageUnit:
          description: "Package size unit."
          type: string
          enum:
            - "GB"
            - "TB"
      required:
        - ingressGb
        - egressGb

    PublicSubnetRecord:
      allOf:
        - $ref: '#/components/schemas/RatedUsageRecord'
        - type: object
          description: "Public IP record."
          properties:
            metadata:
              $ref: '#/components/schemas/PublicSubnetDetails'
          required:
            - metadata

    PublicSubnetDetails:
      type: object
      description: "Details of public subnets."
      properties:
        id:
          description: "Public Subnet identifier as returned by the BMC API."
          type: string
          example: "83604275-bdba-490a-b87a-978e8dffdb14"
        cidr:
          description: "Classless Inter-Domain Routing"
          type: string
          example: "192.168.0.15/24"
        size:
          description: "CIDR size"
          type: string
          example: "/24"
      required:
        - cidr
        - size

    StorageRecord:
      allOf:
        - $ref: '#/components/schemas/RatedUsageRecord'
        - type: object
          description: "Storage usage record."
          properties:
            metadata:
              $ref: '#/components/schemas/StorageDetails'
          required:
            - metadata

    StorageDetails:
      type: object
      description: "Details of the storage associated with this rated usage record."
      properties:
        networkStorageId:
          description: "Network storage ID."
          type: string
          example: "123asd239-323las2d2-123123a"
        networkStorageName:
          description: "Network storage name."
          type: string
          example: "First network storage."
        volumeId:
          description: "Volume ID."
          type: string
          example: "123asd239-323las2d2-123123a"
        volumeName:
          description: "Volume name."
          type: string
          example: "First volume."
        capacityInGb:
          description: "Capacity in GB."
          type: integer
          format: int64
          example: 150000
        createdOn:
          description: "Timestamp when the record was created."
          type: string
          format: date-time
          example: "2020-03-19T16:39:00Z"
      required:
        - networkStorageId
        - networkStorageName
        - volumeId
        - volumeName
        - capacityInGb
        - createdOn

    Product:
      type: object
      description: "Product details"
      properties:
        productCode:
          description: "The code identifying the product. This code has significant\
                    \ across all locations."
          type: string
          example: "d1.tiny"
        productCategory:
          description: "The product category."
          type: string
          example: "server"
        plans:
          description: "The pricing plans available for this product."
          type: array
          items:
            $ref: "#/components/schemas/PricingPlan"
      required:
        - productCode
        - productCategory

    PricingPlan:
      type: object
      description: "Pricing plan details."
      properties:
        sku:
          description: "The SKU identifying this pricing plan."
          type: string
          example: "XXX-XXX-XXX"
        skuDescription:
          description: "Description of this pricing plan."
          type: string
          example: "Hourly Rate for d1.tiny in Phoenix"
        location:
          description: "The code identifying the location."
          type: string
          enum:
            - "PHX"
            - "ASH"
            - "NLD"
            - "SGP"
            - "CHI"
            - "SEA"
            - "AUS"
            - "GLOBAL"
          example: "PHX"
        pricingModel:
          description: "The pricing model."
          type: string
          enum:
            - "HOURLY"
            - "METERED"
            - "ONE_MONTH_RESERVATION"
            - "TWELVE_MONTHS_RESERVATION"
            - "TWENTY_FOUR_MONTHS_RESERVATION"
            - "THIRTY_SIX_MONTHS_RESERVATION"
            - "MONTHLY_PACKAGE"
            - "FREE_TIER"
          example: "HOURLY"
        price:
          description: "The price per unit."
          type: number
          example: 0.22
        priceUnit:
          $ref: "#/components/schemas/PriceUnitEnum"
        correlatedProductCode:
          description: "Product code of the product this product is correlated with"
          type: string
          example: "d1.tiny"
        packageQuantity:
          description: "Package size per month."
          type: number
          example: 50
        packageUnit:
          description: "Package size unit."
          type: string
          enum:
            - "GB"
            - "TB"
      required:
        - sku
        - location
        - pricingModel
        - price
        - priceUnit

    ServerProduct:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          description: "Server product."
          properties:
            metadata:
              $ref: '#/components/schemas/ServerProductMetadata'
          required:
            - metadata

    ServerProductMetadata:
      type: object
      description: "Details of the server product."
      properties:
        ramInGb:
          description: "RAM in GB."
          type: number
          example: 256
        cpu:
          description: "CPU name."
          type: string
          example: "Dual Gold 6258R"
        cpuCount:
          description: "Number of CPUs."
          type: number
          example: 56
        coresPerCpu:
          description: "The number of physical cores present on each CPU."
          type: number
          example: 2
        cpuFrequency:
          description: "CPU frequency in GHz."
          type: number
          example: 2.7
        network:
          description: "Server network."
          type: string
          example: "2x 25Gbps"
        storage:
          description: "Server storage."
          type: string
          example: "2x 2TB NVMe"
      required:
        - ramInGb
        - cpuCount
        - coresPerCpu
        - cpuFrequency
        - cpu
        - network
        - storage

    Reservation:
      type: object
      description: "Reservation details"
      properties:
        id:
          description: "The reservation identifier."
          type: string
          example: "83604275-bdba-490a-b87a-978e8dffdb14"
        productCode:
          description: "The code identifying the product. This code has significant\
                    \ across all locations."
          type: string
          example: "d1.tiny"
        productCategory:
          description: "The product category."
          type: string
          enum: [server, bandwidth, operating-system]
          example: "server"
        location:
          $ref: '#/components/schemas/LocationEnum'
        reservationModel:
          $ref: '#/components/schemas/ReservationModelEnum'
        initialInvoiceModel:
          $ref: '#/components/schemas/ReservationInvoicingModelEnum'
        startDateTime:
          description: "The point in time (in UTC) when the reservation starts."
          type: string
          format: date-time
          example: "2020-03-19T16:39:00Z"
        endDateTime:
          description: "The point in time (in UTC) when the reservation end."
          type: string
          format: date-time
          example: "2020-04-19T16:39:00Z"
        lastRenewalDateTime:
          description: "The point in time (in UTC) when the reservation was renewed last."
          type: string
          format: date-time
          example: "2020-03-19T16:39:00Z"
        nextRenewalDateTime:
          description: "The point in time (in UTC) when the reservation will be renewed if auto renew is set to true."
          type: string
          format: date-time
          example: "2020-04-19T16:39:00Z"
        autoRenew:
          description: "A flag indicating whether the reservation will auto-renew (default is true)."
          type: boolean
          example: true
        sku:
          description: "The sku that will be applied to this reservation. It is useful to find out the price by querying the /product endpoint."
          type: string
          example: "XXX-XXX-XXX"
        price:
          description: "Reservation price."
          type: number
          example: 175.00
        priceUnit:
          $ref: "#/components/schemas/PriceUnitEnum"
        assignedResourceId:
          description: "The resource ID currently being assigned to Reservation."
          type: string
          example: "83604275-bdba-490a-b87a-978e8dffdb14"
      required:
        - id
        - productCode
        - productCategory
        - location
        - reservationModel
        - startDateTime
        - autoRenew
        - sku
        - price
        - priceUnit

    ConfigurationDetails:
      type: object
      description: "Billing configuration details."
      properties:
        thresholdConfiguration:
          $ref: '#/components/schemas/ThresholdConfigurationDetails'

    ThresholdConfigurationDetails:
      type: object
      description: "Threshold billing configuration."
      properties:
        thresholdAmount:
          description: "Threshold billing amount."
          type: number
          example: 100.00
      required:
        - thresholdAmount

    ProductAvailability:
      type: object
      description: "Product availability details."
      properties:
        productCode:
          type: string
          description: "Product code."
          example: "d1.c1.small"
        productCategory:
          type: string
          description: "Product category."
          example: "SERVER"
        locationAvailabilityDetails:
          type: array
          items:
            $ref: '#/components/schemas/LocationAvailabilityDetail'
      required:
        - productCode
        - productCategory
        - locationAvailabilityDetails

    LocationAvailabilityDetail:
      type: object
      description: "Info about location, solutions and availability for a product."
      properties:
        location:
          $ref: '#/components/schemas/LocationEnum'
        minQuantityRequested:
          type: number
          description: "Requested quantity."
          example: 2
        minQuantityAvailable:
          type: boolean
          description: "Is product available in specific location for requested quantity"
          example: true
        availableQuantity:
          type: number
          description: "Total available quantity of product in specific location. Max value is 10."
          example: 5
        solutions:
          type: array
          items:
            type: string
            enum:
              - SERVER_RANCHER
          description: "Solutions supported in specific location for a product."
      required:
        - location
        - minQuantityRequested
        - minQuantityAvailable
        - availableQuantity
        - solutions

    ReservationAutoRenewDisableRequest:
      description: "Disabling auto-renewal for reservation request."
      type: object
      properties:
        autoRenewDisableReason:
          type: string

    ReservationRequest:
      type: object
      description: "Reservation request."
      properties:
        sku:
          description: "The sku code of product pricing plan."
          type: string
          example: "XXX-XXX-XXX"
      required:
        - sku

    LocationEnum:
      description: "The location code."
      type: string
      enum:
        - "PHX"
        - "ASH"
        - "NLD"
        - "SGP"
        - "CHI"
        - "SEA"
        - "AUS"

    ReservationModelEnum:
      description: "The reservation model."
      type: string
      enum:
        - "ONE_MONTH_RESERVATION"
        - "TWELVE_MONTHS_RESERVATION"
        - "TWENTY_FOUR_MONTHS_RESERVATION"
        - "THIRTY_SIX_MONTHS_RESERVATION"
        - "FREE_TIER"
    ReservationInvoicingModelEnum:
      description: "Reservations created with initial invoice model ON_CREATION will be invoiced on same date when reservation is created.
      Reservation created with CALENDAR_MONTH initial invoice model will be invoiced at the beginning of next month."
      type: string
      enum:
        - "ON_CREATION"
        - "CALENDAR_MONTH"

    ProductCategoryEnum:
      description: "The product category."
      type: string
      enum:
        - "SERVER"
        - "BANDWIDTH"
        - "OPERATING_SYSTEM"
        - "PUBLIC_IP"
        - "STORAGE"

    PriceUnitEnum:
      description: "The unit to which the price applies."
      type: string
      enum:
        - "HOUR"
        - "MONTH"
        - "GB"
        - "UNIT"
        - "FLAT"
        - "TB_PER_HOUR"
      example: "MONTH"

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          readOnly: true
          description: "The description detailing the cause of the error code."
        validationErrors:
          type: array
          items:
            type: string
          readOnly: true
          description: "Validation errors, if any."

  responses:
    BadRequest:
      description: "The request failed due to wrong data. Please check the provided parameters and try again."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: "The request failed since the resource could not been found."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: "The request failed since the resource was not in the correct state."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: "The request failed due to invalid credentials. Please check the provided credentials and try again."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: "The request failed since this resource cannot be accessed by the provided credentials."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: "The server encountered an unexpected condition that prevented it from fulfilling the request."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

