openapi: 3.0.3

info:
  title: Tags API
  description: |
    Tags are case-sensitive key-value pairs that simplify resource management. The Tag Manager API allows you to create
    and manage such tags to later assign them to related resources in your Bare Metal Cloud (through the respective
    resource apis) in order to group and categorize them.<br>
    <br>
    <span class='pnap-api-knowledge-base-link'>
    Knowledge base articles to help you can be found
    <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#server-tag-manager-api' target='_blank'>here</a>
    </span><br>
    <br>
    <b>All URLs are relative to (https://api.phoenixnap.com/tag-manager/v1/)</b>
  termsOfService: https://phoenixnap.com/infrastructure-solutions/legal-it/privacy-shield-compliant-privacy-policy
  version: "1.0"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: PhoenixNAP Team
    email: support@phoenixnap.com
    url: https://phoenixnap.com/

security:
  - OAuth2:
      - tags
      - tags.read

servers:
  - url: "https://api.phoenixnap.com/tag-manager/v1"

tags:
  - name: "Tags"
    description: "Tag operations"

paths:
  /tags:
    get:
      tags:
        - "Tags"
      parameters:
        - name: name
          in: query
          description: "Query a tag by its name."
          schema:
            type: string
          example: env
      description: "Retrieve all tags belonging to the BMC Account."
      summary: "List tags."
      operationId: tagsGet
      security:
        - OAuth2: [ tags.read ]
      responses:
        "200":
          description: "Tags list."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - "Tags"
      description: "Create a tag with the provided information."
      summary: "Create a Tag."
      operationId: tagsPost
      security:
        - OAuth2: [ tags ]
      requestBody:
        description: The body containing the tag details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagCreate"
      responses:
        "201":
          description: "Tag created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /tags/{tagId}:
    parameters:
      - in: path
        name: tagId
        required: true
        schema:
          type: string
        description: "The tag's ID."
        example: "e6afba51-7de8-4080-83ab-0f915570659c"

    get:
      tags:
        - "Tags"
      summary: "Get a Tag."
      operationId: tagsTagIdGet
      description: "Retrieve the tag with the given ID"
      security:
        - OAuth2: [ tags.read ]
      responses:
        "200":
          description: "Specific Tag details."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    patch:
      tags:
        - "Tags"
      summary: "Modify a Tag."
      operationId: tagsTagIdPatch
      description: "Updates the tag with the given ID."
      security:
        - OAuth2: [ tags ]
      requestBody:
        description: The body containing the tag changes.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagUpdate"
      responses:
        "200":
          description: "Tag partially updated."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      tags:
        - "Tags"
      summary: "Delete a Tag."
      operationId: tagsTagIdDelete
      description: "Delete the tag with the given ID."
      security:
        - OAuth2: [ tags ]
      responses:
        "200":
          description: "Tag deleted."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResult"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"


components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://auth.phoenixnap.com/auth/realms/BMC/protocol/openid-connect/token
          scopes:
            tags: Grants full access to tags-api.
            tags.read: Grants read only access to tags-api.
  schemas:
    Tag:
      type: object
      description: "Tag model."
      required:
        - id
        - name
        - isBillingTag
      properties:
        id:
          description: "The unique id of the tag."
          type: string
          example: "60ffafcdffb8b074c7968dad"
        name:
          description: "The name of the tag."
          type: string
          example: "Environment"
        values:
          description: "The optional values of the tag."
          type: array
          items:
            type: string
          example: "[DEV, PROD]"
        description:
          description: "The description of the tag."
          type: string
          example: "This tag is used for all resources that need to be assigned to an environment."
        isBillingTag:
          description: "Whether or not to show the tag as part of billing and invoices."
          type: boolean
          example: true
        resourceAssignments:
          description: "The tag's assigned resources."
          type: array
          items:
            $ref: "#/components/schemas/ResourceAssignment"
        createdBy:
          description: "The tag's creator."
          type: string
          enum: [ USER, SYSTEM ]
          default: USER

    TagCreate:
      type: object
      description: "Tag creation model."
      required:
        - name
        - isBillingTag
      properties:
        name:
          description: "The unique name of the tag. Tag names are case-sensitive, and should be composed of a maximum of 100 characters including UTF-8 Unicode letters, numbers, and the following symbols: '-', '_'. Regex: [A-zÀ-ú0-9_-]{1,100}"
          type: string
          example: "Environment"
        description:
          description: "The description of the tag."
          type: string
          example: "This tag is used for all resources that need to be assigned to an environment."
        isBillingTag:
          description: "Whether or not to show the tag as part of billing and invoices."
          type: boolean
          example: true

    TagUpdate:
      type: object
      description: "Tag update model."
      required:
        - name
        - isBillingTag
      properties:
        name:
          description: "The unique name of the tag. Tag names are case-sensitive, and should be composed of a maximum of 100 characters including UTF-8 Unicode letters, numbers, and the following symbols: '-', '_'. Regex: [A-zÀ-ú0-9_-]{1,100}"
          type: string
          example: "Environment"
        description:
          description: "The description of the tag."
          type: string
          example: "This tag is used for all resources that need to be assigned to an environment."
        isBillingTag:
          description: "Whether or not to show the tag as part of billing and invoices."
          type: boolean
          example: true

    DeleteResult:
      type: object
      description: "Result of a successful delete action."
      required:
        - result
        - tagId
      properties:
        result:
          description: "Tag deletion result message."
          type: string
          example: "Tag [tag-name] has been deleted."
        tagId:
          description: "The unique identifier of the tag."
          type: string
          example: "60ffafcdffb8b074c7968dad"

    ResourceAssignment:
      type: object
      description: "Resource assigned to a tag."
      required:
        - resourceName
      properties:
        resourceName:
          description: "The resource name."
          type: string
          example: "/bmc/servers/60ffafcdffb8b074c7968dad"
        value:
          description: "The value of the tag assigned to the resource."
          type: string
          example: "DEV"

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: "The description detailing the cause of the error code."
        validationErrors:
          type: array
          items:
            type: string
          description: "Validation errors, if any."

  responses:
    BadRequest:
      description: "The request failed due to wrong data. Please check the provided parameters and try again."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: "The request failed due to invalid credentials. Please check the provided credentials and try again."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Forbidden:
      description: "The request failed since this resource cannot be accessed by the provided credentials."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Conflict:
      description: "The request failed since a tag with the given name already exists."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InternalServerError:
      description: "The server encountered an unexpected condition that prevented it from fulfilling the request."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
